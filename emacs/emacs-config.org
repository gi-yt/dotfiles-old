#+title: Arya's GNU Emacs Configuration
#+author: Arya Kiran
* Basic stuff
** Fonts
   #+begin_src emacs-lisp
(defvar efs/default-font-size 100)
(defvar efs/default-variable-font-size 100)
(defvar efs/frame-transparency '(90 . 90))

(set-face-attribute 'default nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the fixed pitch face
(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height efs/default-font-size)

;; Set the variable pitch face
(set-face-attribute 'variable-pitch nil :font "Cantarell" :height efs/default-variable-font-size :weight 'regular)


   #+end_src
** Disabling all the ugly bars present in emacs
   #+begin_src emacs-lisp
   (scroll-bar-mode -1)        ; Disable visible scrollbar
   (tool-bar-mode -1)          ; Disable the toolbar
   (menu-bar-mode -1)          ; Disable the menu bar
   #+end_src
** Add melpa and org package repositories and installing use-package
#+begin_src emacs-lisp
    (defvar bootstrap-version)
    (let ((bootstrap-file(expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))(bootstrap-version 5)) (unless (file-exists-p bootstrap-file)(with-current-buffer(url-retrieve-synchronously "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el" 'silent 'inhibit-cookies)(goto-char (point-max)) (eval-print-last-sexp)))(load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
#+end_src

** Disable Scratch buffer
#+begin_src emacs-lisp
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*"))
    (if (get-buffer "*straight-process*")
        (kill-buffer "*straight-process*")))

  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+end_src

* Custom Keybindinds to make life easier
** ivy + counsel + swiper
#+begin_src emacs-lisp
    (use-package ivy
    :straight t
      :bind (("C-s" . swiper)
             :map ivy-minibuffer-map
             ("TAB" . ivy-alt-done)
             ("C-l" . ivy-alt-done)
             ("C-j" . ivy-next-line)
             ("C-k" . ivy-previous-line)
             :map ivy-switch-buffer-map
             ("C-k" . ivy-previous-line)
             ("C-l" . ivy-done)
             ("C-d" . ivy-switch-buffer-kill)
             :map ivy-reverse-i-search-map
             ("C-k" . ivy-previous-line)
             ("C-d" . ivy-reverse-i-search-kill))
      :config
      (ivy-mode 1))
    (use-package counsel :straight t)
  (use-package all-the-icons-ivy
  :straight t
    :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
#+end_src
** Hotkey based config reload
#+begin_src emacs-lisp
(global-set-key (kbd "M-r") 'reload-config)
(defun reload-config ()
  (interactive)
  (load-file (concat user-emacs-directory "init.el")))
#+end_src
** Better completion for commands like M-x
#+begin_src emacs-lisp
    (use-package ivy-rich
    :straight t
      :after ivy
      :init
      (ivy-rich-mode 1))

    (use-package counsel
    :straight t
      :bind (("M-x" . counsel-M-x)
  ("<menu>" . counsel-M-x)
             ("C-x b" . counsel-switch-buffer)
             ("C-x C-f" . counsel-find-file)))
#+end_src
** Zooming in and out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** Open Config
#+begin_src emacs-lisp
(global-set-key (kbd "<f1>") (lambda() (interactive)(find-file "~/emacs-config.org")))
#+end_src
* Evil Mode and things related to it
** Evil
#+begin_src emacs-lisp

  (defun dw/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    circe-server-mode
                    circe-chat-mode
                    circe-query-mode
                    sauron-mode
                    term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))

  (use-package undo-tree
  :straight t
  :init
  (global-undo-tree-mode 1))
  (use-package evil
  :straight t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (add-hook 'evil-mode-hook 'dw/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)

      ;; Disable arrow keys in normal and visual modes

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))

  (use-package evil-collection
  :straight t
    :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
          (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))


#+end_src
** Make :q kill current buffer
#+begin_src emacs-lisp
(evil-ex-define-cmd "q" 'kill-this-buffer)
(evil-ex-define-cmd "quit" 'evil-quit)
#+end_src
* Org mode additions
** Keybindings
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
#+end_src
** UI Improvements
#+begin_src emacs-lisp
    (org-indent-mode 1)
    (setq org-ellipsis " â–¾")

  (use-package org-bullets
  :straight t
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
** Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . nil)
   (python . t)))

#+end_src
* QOF improvements
** 0x0.st
   #+begin_src emacs-lisp
     (use-package 0x0
       :straight t
       :defer 0)
   #+end_src
** Which Key
#+begin_src emacs-lisp
    (use-package which-key
      :straight t
      :defer 0
      :diminish which-key-mode
      :config
  (which-key-mode)
      (setq which-key-idle-delay 0))
#+end_src
** Make <ESC> quit prompts like C-g
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Recent Files
   #+begin_src emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)
     (global-set-key "\C-x\ \C-r" 'recentf-open-files)
   #+end_src
** Keycast mode
#+begin_src emacs-lisp
        (use-package keycast :straight t)
      (with-eval-after-load 'keycast
        (define-minor-mode keycast-mode
          "Show current command and its key binding in the mode line."
          :global t
          (if keycast-mode
              (add-hook 'pre-command-hook 'keycast--update t)
            (remove-hook 'pre-command-hook 'keycast--update)))

        (add-to-list 'global-mode-string '("" mode-line-keycast)))
    (keycast-mode 1)
#+end_src
** Rainbow Parenthesis
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :straight t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Highlight current line
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode 1))
#+end_src
** Colour Stuff
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :straight t)
(rainbow-mode 1)
#+end_src
* Making Emacs look nice
** Modeline
*** Getting Doom Emacs's modeline
    #+begin_src emacs-lisp
      (use-package all-the-icons :straight t)
      (use-package doom-modeline
        :straight t )
(doom-modeline-mode 1)
    #+end_src
*** Extra Widgets on Modeline
    #+begin_src emacs-lisp
(require 'display-line-numbers)

(defcustom display-line-numbers-exempt-modes
  '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
  "Major modes on which to disable line numbers."
  :group 'display-line-numbers
  :type 'list
  :version "green")

(defun display-line-numbers--turn-on ()
  "Turn on line numbers except for certain major modes.
Exempt major modes are defined in `display-line-numbers-exempt-modes'."
  (unless (or (minibufferp)
              (member major-mode display-line-numbers-exempt-modes))
    (display-line-numbers-mode)))

(global-display-line-numbers-mode)
    #+end_src
** Theme
   #+begin_src emacs-lisp
          (use-package doom-themes
       :straight t
            :init (load-theme 'doom-one))

   #+end_src
** Start screen
#+begin_src emacs-lisp
  (use-package dashboard
  :straight t
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor! It is an Operating System")
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (bookmarks . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                    (bookmarks . "book"))))
#+end_src
* Git via Magit
#+begin_src emacs-lisp
  (use-package magit
    :straight t
    :defer 0
    :commands magit-status
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
         #+end_src

* Programming
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet :straight t)
  (use-package yasnippet-snippets :straight t)
  (yas-reload-all)
  (yas-minor-mode 1)
#+end_src
** LSP + Company
#+begin_src emacs-lisp
            (defun efs/lsp-mode-setup ()
              (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
              (lsp-headerline-breadcrumb-mode))

            (use-package lsp-mode
            :straight t
              :commands (lsp lsp-deferred)
              :hook (lsp-mode . efs/lsp-mode-setup)
              :init
              (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
              :config
              (lsp-enable-which-key-integration t))
            (use-package lsp-ui :after lsp-mode
            :straight t
              :hook (lsp-mode . lsp-ui-mode)
              :custom
              (lsp-ui-doc-position 'bottom))
          (use-package lsp-treemacs :after (lsp-mode lsp-ui)
          :straight t
            :after lsp)
        (use-package lsp-ivy :straight t :after (ivy lsp-mode))
  (use-package company
                    :straight t
                      :after lsp-mode
                      :hook (lsp-mode . company-mode)
                      :bind (:map company-active-map
                             ("<tab>" . company-complete-selection))
                            (:map lsp-mode-map
                             ("<tab>" . company-indent-or-complete-common))
                      :custom
                      (company-minimum-prefix-length 1)
                      (company-idle-delay 0.0))

                    (use-package company-box
                    :straight t
                      :hook (company-mode . company-box-mode))
              (use-package company-quickhelp :straight t)
            (company-quickhelp-mode 1)
      (use-package python-mode
        :straight t
        :hook (python-mode . lsp-deferred))
      (use-package pyvenv
      :straight t
        :config
        (pyvenv-mode 1))
    (use-package py-autopep8 :straight t :defer 0)
  (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)

#+end_src
** Auto Close bracket
#+begin_src emacs-lisp
  (use-package smartparens :straight t)
(smartparens-global-mode 1)
#+end_src
** FlyCheck
#+begin_src emacs-lisp
  (use-package flycheck
    :straight t)
(global-flycheck-mode t)
#+end_src
* VTerm
#+begin_src emacs-lisp
        (use-package vterm
        :straight t
          :commands vterm
          :config
          (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  ;; Set this to match your custom shell prompt
          (setq vterm-shell "bash")                       ;; Set this to customize the shell to launch
          (setq vterm-max-scrollback 10000))
      (global-set-key (kbd "<s-return>") 'vterm)
    (defalias 'yes-or-no-p 'y-or-n-p)
  (setq vterm-kill-buffer-on-exit t)
#+end_src

* PDF
#+begin_src emacs-lisp
  (use-package pdf-tools 
    :straight t)
  (pdf-tools-install)
  (setq pdf-annot-activate-created-annotations t)
  (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
#+end_src
* Dired
#+begin_src emacs-lisp
      (use-package dired
        :commands (dired dired-jump)
        :bind (("C-x C-j" . dired-jump))
        :custom ((dired-listing-switches "-agho --group-directories-first"))
        :config
        (evil-collection-define-key 'normal 'dired-mode-map
          "h" 'dired-single-up-directory
          "l" 'dired-single-buffer))


      (use-package all-the-icons-dired :after dired
      :straight t
        :hook (dired-mode . all-the-icons-dired-mode))

      (use-package dired-open
      :straight t
  :commands (dired dired-jump)
        :config
        ;; Doesn't work as expected!
        ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
        (setq dired-open-extensions '(("mkv" . "mpv"))))

      (use-package dired-hide-dotfiles
      :straight t
        :hook (dired-mode . dired-hide-dotfiles-mode)
        :config
        (evil-collection-define-key 'normal 'dired-mode-map
          "H" 'dired-hide-dotfiles-mode))
#+end_src

* Emacs startup time
#+begin_src emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

;; Profile emacs startup
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "*** Emacs loaded in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time before-init-time)))
                     gcs-done)))
#+end_src
* EXWM
#+begin_src emacs-lisp
    ;;(use-package exwm)
    ;;(require 'exwm-config)
    ;;(exwm-config-example)
  ;;(add-hook 'exwm-manage-finish-hook
            ;;(lambda ()
              ;;(when (and exwm-class-name
                ;;         (string= exwm-class-name "Chromium"))
                ;;(exwm-input-set-local-simulation-keys nil))))
;;(require 'exwm-systemtray)
;;(exwm-systemtray-enable)

#+end_src

* Asynchronus processes
#+begin_src emacs-lisp
(use-package async
  :straight t
  :init (dired-async-mode 1))
#+end_src

* Tabs
#+begin_src emacs-lisp
    (use-package centaur-tabs
    :straight t
    :config
    (setq centaur-tabs-style "bar"
           centaur-tabs-height 32
           centaur-tabs-set-icons t
           centaur-tabs-set-modified-marker t
           centaur-tabs-show-navigation-buttons t
           centaur-tabs-set-bar 'under
           x-underline-at-descent-line t)
    (centaur-tabs-headline-match)
    ;; (setq centaur-tabs-gray-out-icons 'buffer)
    ;; (centaur-tabs-enable-buffer-reordering)
    ;; (setq centaur-tabs-adjust-buffer-order t)
    (centaur-tabs-mode t)
    (setq uniquify-separator "/")
    (setq uniquify-buffer-name-style 'forward)
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

  Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
  All buffer name start with * will group to \"Emacs\".
  Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
         ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
         ;; "Remote")
         ((or (string-equal "*" (substring (buffer-name) 0 1))
              (memq major-mode '(magit-process-mode
                                 magit-status-mode
                                 magit-diff-mode
                                 magit-log-mode
                                 magit-file-mode
                                 magit-blob-mode
                                 magit-blame-mode
                                 )))
          "Emacs")
         ((derived-mode-p 'prog-mode)
          "Editing")
         ((derived-mode-p 'dired-mode)
          "Dired")
         ((memq major-mode '(helpful-mode
                             help-mode))
          "Help")
         ((memq major-mode '(org-mode
                             org-agenda-clockreport-mode
                             org-src-mode
                             org-agenda-mode
                             org-beamer-mode
                             org-indent-mode
                             org-bullets-mode
                             org-cdlatex-mode
                             org-agenda-log-mode
                             diary-mode))
          "OrgMode")
         (t
          (centaur-tabs-get-group-name (current-buffer))))))
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (term-mode . centaur-tabs-local-mode)
    (vterm-mode . centaur-tabs-local-mode)
    (calendar-mode . centaur-tabs-local-mode)
    (org-agenda-mode . centaur-tabs-local-mode)
    (helpful-mode . centaur-tabs-local-mode)
    :bind
    ("M-g" . centaur-tabs-counsel-switch-group)
    ("C-c t g" . centaur-tabs-group-buffer-groups)
    (:map evil-normal-state-map
           ("g t" . centaur-tabs-forward)
           ("g T" . centaur-tabs-backward)))

  #+end_src

* Unicode Support
#+begin_src emacs-lisp

  (defun dw/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                           (lambda (i) (string-equal (car i) block-name))
                           unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :straight t
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
      (lambda (block-name)
        (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
      '("Dingbats"
        "Emoticons"
        "Miscellaneous Symbols and Pictographs"
        "Transport and Map Symbols"))
    (unicode-fonts-setup))


#+end_src

* Emoji
#+begin_src emacs-lisp
  (use-package emojify
  :straight t
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)
#+end_src
* Notifications
#+begin_src emacs-lisp
  (use-package alert
  :straight t
    :commands alert
    :config
    (setq alert-default-style 'notifications))
#+end_src
* Auto Save
#+begin_src emacs-lisp
  (use-package super-save
  :straight t
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+end_src

* Evil Nerd Commenter
#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
  :straight t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))


#+end_src

* Telegram
#+begin_src emacs-lisp
  (use-package telega
    :straight t)
  (define-key global-map (kbd "C-c t") telega-prefix-map)
  (setq telega-completing-read-function 'ivy-completing-read)
  (setq telega-emoji-company-backend 'telega-company-emoji)
#+end_src

* App Launcher
#+begin_src emacs-lisp
  (use-package app-launcher
    :straight '(app-launcher :host github :repo "SebastienWae/app-launcher"))

  (define-key global-map (kbd "s-d") 'app-launcher-run-app)
#+end_src

* Arch Linux Package Management
#+begin_src emacs-lisp
        (use-package arch-packer :straight t)
      (setq arch-packer-default-command "yay")
    (use-package general :straight t
  :config
    (general-create-definer ak/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC")

    (ak/leader-keys
     "p"  '(:ignore t :which-key "Manage Packages")
     "pi" '(arch-packer-install-package :which-key "Get Package Info")
     "ps" '(arch-packer-search-package :which-key "Search for a package")
     "pl" '(arch-packer-list-packages :which-key "List all installed packages")))


#+end_src
* AutoSave
#+begin_src emacs-lisp
(setq auto-save-list-file-prefix "~/.config/emacs/autosave/")
(setq auto-save-file-name-transforms '((".*" "~/.config/emacs/autosave/" t)))
(setq server-use-tcp t)

#+end_src
* Undo Session persist
#+begin_src emacs-lisp
(use-package undo-fu-session :straight t)
  (global-undo-fu-session-mode)
#+end_src
* PDF Restore
#+begin_src emacs-lisp
  (use-package pdf-view-restore
  :straight t
    :after pdf-tools
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
  (setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")

#+end_src

* Misc
#+begin_src emacs-lisp
  (setq-default
   indent-tabs-mode nil                             ; Prefers spaces over tabs
   load-prefer-newer t                              ; Prefers the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
  (setq large-file-warning-threshold nil)
#+end_src
* Better C-x o
#+begin_src emacs-lisp
  (windmove-default-keybindings)
  (global-set-key (kbd "M-<left>")  'windmove-left)
  (global-set-key (kbd "M-<right>") 'windmove-right)
  (global-set-key (kbd "M-<up>")    'windmove-up)
  (global-set-key (kbd "M-<down>")  'windmove-down)
#+end_src
* Hide ModeLine
#+begin_src emacs-lisp
  (use-package hide-mode-line :straight t :hook (vterm-mode . hide-mode-line-mode)(dashboard-mode . hide-mode-line-mode))
#+end_src

* M-x History
  #+begin_src emacs-lisp
(straight-use-package 'smex)
  #+end_src

* Org Preview
  #+begin_src emacs-lisp
    (use-package org-preview-html :straight t)
(use-package html-preview
  :straight '(html-preview :host github :repo "punchagan/html-preview"))
  #+end_src
* MU4E
** base
  #+begin_src emacs-lisp
(use-package mu4e
  :ensure nil
  ;; :load-path "/usr/share/emacs/site-lisp/mu4e/"
  ;; :defer 20 ; Wait until 20 seconds after startup
  :config

  ;; This is set to 't' to avoid mail syncing issues when using mbsync
  (setq mu4e-change-filenames-when-moving t)

  ;; Refresh mail using isync every 10 minutes
  (setq mu4e-update-interval (* 10 60))
  (setq mu4e-get-mail-command "mbsync -a")
  (setq mu4e-maildir "~/Mail")

  (setq mu4e-drafts-folder "/[Gmail]/Drafts")
  (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
  (setq mu4e-refile-folder "/[Gmail]/All Mail")
  (setq mu4e-trash-folder  "/[Gmail]/Trash")

  (setq mu4e-maildir-shortcuts
      '(("/Inbox"             . ?i)
        ("/[Gmail]/Sent Mail" . ?s)
        ("/[Gmail]/Trash"     . ?t)
        ("/[Gmail]/Drafts"    . ?d)
        ("/[Gmail]/All Mail"  . ?a))))


(setq mu4e-maildir-shortcuts
    '((:maildir "/Inbox"    :key ?i)
      (:maildir "/[Gmail]/Sent Mail" :key ?s)
      (:maildir "/[Gmail]/Trash"     :key ?t)
      (:maildir "/[Gmail]/Drafts"    :key ?d)
      (:maildir "/[Gmail]/All Mail"  :key ?a)))


  #+end_src

** xwidget based preview
   #+begin_src emacs-lisp
     (use-package mu4e-views
  :straight t
       :after mu4e
       :defer nil
       :bind (:map mu4e-headers-mode-map
             ("v" . mu4e-views-mu4e-select-view-msg-method) ;; select viewing method
             ("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
             ("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
             ("f" . mu4e-views-toggle-auto-view-selected-message) ;; toggle opening messages automatically when moving in the headers view
             ("i" . mu4e-views-mu4e-view-as-nonblocked-html) ;; show currently selected email with all remote content
             )
       :config
       (setq mu4e-views-completion-method 'ivy) ;; use ivy for completion
       (setq mu4e-views-default-view-method "html") ;; make xwidgets default
       (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
       (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window) ;; when pressing n and p stay in the current window
       (setq mu4e-views-auto-view-selected-message t))
   #+end_src
