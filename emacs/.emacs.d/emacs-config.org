#+title: Arya's GNU Emacs Configuration
#+author: Arya Kiran
* TOC :toc:
- [[#basic-stuff][Basic stuff]]
  - [[#disabling-annoyances-present-in-emacs][Disabling annoyances present in emacs]]
  - [[#add-melpa-and-org-package-repositories-and-installing-use-package][Add melpa and org package repositories and installing use-package]]
  - [[#garbage-collection][Garbage Collection]]
  - [[#disable-scratch-buffer][Disable Scratch buffer]]
- [[#custom-keybindinds-to-make-life-easier][Custom Keybindinds to make life easier]]
  - [[#ivy--counsel--swiper][ivy + counsel + swiper]]
  - [[#hotkey-based-config-reload][Hotkey based config reload]]
  - [[#zooming-in-and-out][Zooming in and out]]
  - [[#open-config][Open Config]]
- [[#evil-mode-and-things-related-to-it][Evil Mode and things related to it]]
  - [[#evil][Evil]]
  - [[#make-q-kill-current-buffer][Make :q kill current buffer]]
- [[#org-mode-additions][Org mode additions]]
  - [[#keybindings][Keybindings]]
  - [[#ui-improvements][UI Improvements]]
  - [[#babel][Babel]]
- [[#qof-improvements][QOF improvements]]
  - [[#0x0st][0x0.st]]
  - [[#which-key][Which Key]]
  - [[#make-esc-quit-prompts-like-c-g][Make <ESC> quit prompts like C-g]]
  - [[#recent-files][Recent Files]]
  - [[#rainbow-parenthesis][Rainbow Parenthesis]]
  - [[#highlight-current-line][Highlight current line]]
  - [[#colour-stuff][Colour Stuff]]
  - [[#no-littering][No littering]]
  - [[#remember-your-location-in-a-file][Remember your location in a file]]
  - [[#generic-syntax-highlighting][Generic Syntax highlighting]]
  - [[#buttonize-urls][Buttonize URLs]]
  - [[#display-a-list-of-keybindings-for-the-current-major-mode][Display a list of keybindings for the current major mode]]
- [[#making-emacs-look-nice][Making Emacs look nice]]
  - [[#modeline][Modeline]]
  - [[#theme][Theme]]
  - [[#start-screen][Start screen]]
- [[#git-via-magit][Git via Magit]]
- [[#programming][Programming]]
  - [[#yasnippet][Yasnippet]]
  - [[#lsp--company][LSP + Company]]
  - [[#lisp][LISP]]
  - [[#htmlcssjs][HTML/CSS/JS]]
  - [[#rust][Rust]]
  - [[#bash][Bash]]
  - [[#json][JSON]]
  - [[#cc][C/C++]]
  - [[#markdown][MarkDown]]
  - [[#auto-close-bracket][Auto Close bracket]]
  - [[#flycheck][FlyCheck]]
  - [[#highlight-indentations][Highlight indentations]]
  - [[#agressive-indent][Agressive indent]]
  - [[#multiple-cursors][Multiple cursors]]
- [[#vterm][VTerm]]
- [[#pdf][PDF]]
- [[#dired][Dired]]
- [[#tabs][Tabs]]
- [[#unicode-support][Unicode Support]]
- [[#emoji][Emoji]]
- [[#notifications][Notifications]]
- [[#auto-save][Auto Save]]
- [[#evil-nerd-commenter][Evil Nerd Commenter]]
- [[#telegram][Telegram]]
- [[#autosave][AutoSave]]
- [[#undo-session-persist][Undo Session persist]]
- [[#pdf-restore][PDF Restore]]
- [[#misc][Misc]]
- [[#better-c-x-o][Better C-x o]]
- [[#hide-modeline][Hide ModeLine]]
- [[#m-x-history][M-x History]]
- [[#org-preview][Org Preview]]
- [[#mu4e][MU4E]]
  - [[#base][base]]
  - [[#xwidget-based-preview][xwidget based preview]]
  - [[#icons][Icons]]
  - [[#org-mail][ORG Mail]]
  - [[#notifications-1][Notifications]]
- [[#gpg][GPG]]
- [[#haskell][HASKELL]]
- [[#emacsclient][Emacsclient]]
- [[#special-scratch-buffers][Special scratch buffers]]
- [[#generalel-keybindings][General.el Keybindings]]
- [[#org-blog][ORG Blog]]
- [[#auto-update][Auto Update]]
- [[#passwords][Passwords]]
- [[#org-roam][ORG Roam]]
- [[#battery][Battery]]
- [[#hungry-delay][Hungry delay]]
- [[#expand-region][EXpand Region]]
- [[#temp-maiximizze][Temp Maiximizze]]
- [[#quelpa][Quelpa]]
- [[#pdf-continuos-scroll][PDF continuos scroll]]

* Basic stuff
** Disabling annoyances present in emacs
   #+begin_src emacs-lisp
     (scroll-bar-mode -1)        ; Disable visible scrollbar
     (tool-bar-mode -1)          ; Disable the toolbar
     (menu-bar-mode -1)          ; Disable the menu bar
     (blink-cursor-mode -1)
     (setq ring-bell-function 'ignore)
     (setq scroll-margin 0
           scroll-conservatively 100000
           scroll-preserve-screen-position 1)
     (line-number-mode t)
     (column-number-mode t)
     (size-indication-mode t) ; Displays the File Size in the modeline
     (setq auto-window-vscroll nil)
     (fset 'yes-or-no-p 'y-or-n-p)
     (global-hl-line-mode +1)

   #+end_src
** Add melpa and org package repositories and installing use-package
#+begin_src emacs-lisp
    ;; Initialize package sources
    (require 'package)

    (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                             ("org" . "https://orgmode.org/elpa/")
                             ("elpa" . "https://elpa.gnu.org/packages/")))

    (package-initialize)
    (unless package-archive-contents
      (package-refresh-contents))

      ;; Initialize use-package on non-Linux platforms
    (unless (package-installed-p 'use-package)
      (package-install 'use-package))
    ;; (setq package-native-compile t)
    (require 'use-package)
    (setq use-package-always-ensure t)

  ;; Silence compiler warnings as they can be pretty disruptive
  ;; (setq native-comp-async-report-warnings-errors nil)

#+end_src

** Garbage Collection
   #+begin_src emacs-lisp
     ;; Using garbage magic hack.
      (use-package gcmh
        :config
        (gcmh-mode 1))
     ;; Setting garbage collection threshold
     (setq gc-cons-threshold 402653184
           gc-cons-percentage 0.6)

     ;; Profile emacs startup
     (add-hook 'emacs-startup-hook
               (lambda ()
                 (message "*** Emacs loaded in %s with %d garbage collections."
                          (format "%.2f seconds"
                                  (float-time
                                   (time-subtract after-init-time before-init-time)))
                          gcs-done)))

     ;; Silence compiler warnings as they can be pretty disruptive (setq comp-async-report-warnings-errors nil)
(delete-selection-mode t)

   #+end_src
** Disable Scratch buffer
#+begin_src emacs-lisp
  (defun remove-scratch-buffer ()
    (if (get-buffer "*scratch*")
        (kill-buffer "*scratch*"))
    (if (get-buffer "*ensure-process*")
        (kill-buffer "*ensure-process*")))
  (add-hook 'after-change-major-mode-hook 'remove-scratch-buffer)
#+end_src

* Custom Keybindinds to make life easier
** ivy + counsel + swiper
   #+begin_src emacs-lisp
       (use-package ivy
       :ensure t
         :bind (("C-s" . swiper)
                :map ivy-minibuffer-map
                ("TAB" . ivy-alt-done)
                ("M-TAB" . ivy-immediate-done)
                ("C-l" . ivy-alt-done)
                ("C-j" . ivy-next-line)
                ("C-k" . ivy-previous-line)
                :map ivy-switch-buffer-map
                ("C-k" . ivy-previous-line)
                ("C-l" . ivy-done)
                ("C-d" . ivy-switch-buffer-kill)
                :map ivy-reverse-i-search-map
                ("C-k" . ivy-previous-line)
                ("C-d" . ivy-reverse-i-search-kill))
         :config
         (ivy-mode 1))
     (use-package all-the-icons-ivy
     :ensure t
       :init (add-hook 'after-init-hook 'all-the-icons-ivy-setup))
  (use-package ivy-rich
  :ensure t
    :after ivy
    :init
    (ivy-rich-mode 1))

  (use-package counsel
  :ensure t
    :bind (("M-x" . counsel-M-x)
("<menu>" . counsel-M-x)
           ("C-x b" . counsel-switch-buffer)
           ("C-x C-f" . counsel-find-file)))
   #+end_src
** Hotkey based config reload
#+begin_src emacs-lisp
(global-set-key (kbd "M-r") 'reload-config)
(defun reload-config ()
  (interactive)
  (load-file (concat user-emacs-directory "init.el")))
#+end_src
** Zooming in and out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src
** Open Config
#+begin_src emacs-lisp
(global-set-key (kbd "<f1>") (lambda() (interactive)(find-file "~/.emacs.d/emacs-config.org")))
#+end_src
* Evil Mode and things related to it
** Evil
#+begin_src emacs-lisp

  (defun dw/evil-hook ()
    (dolist (mode '(custom-mode
                    eshell-mode
                    git-rebase-mode
                    erc-mode
                    term-mode))
    (add-to-list 'evil-emacs-state-modes mode)))
  (use-package undo-tree
  :ensure t
  :init
  (global-undo-tree-mode 1))
  (use-package evil
  :ensure t
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    :config
    (add-hook 'evil-mode-hook 'dw/evil-hook)
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)
    (define-key evil-insert-state-map (kbd "C-h") 'evil-delete-backward-char-and-join)
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal))
  (use-package evil-collection :ensure t :after evil
    :init
    (setq evil-collection-company-use-tng nil)  ;; Is this a bug in evil-collection?
    :custom
    (evil-collection-outline-bind-tab-p nil)
    :config
    (setq evil-collection-mode-list
          (remove 'lispy evil-collection-mode-list))
    (evil-collection-init))


#+end_src
** Make :q kill current buffer
#+begin_src emacs-lisp
(evil-ex-define-cmd "q" 'kill-this-buffer)
(evil-ex-define-cmd "quit" 'evil-quit)
#+end_src
* Org mode additions
** Keybindings
#+begin_src emacs-lisp
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
#+end_src
** UI Improvements
#+begin_src emacs-lisp
  (org-indent-mode 1)
  (setq org-ellipsis " ▾")
  (use-package org-bullets
  :ensure t
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src
** Babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)))
(require 'ox-man)
#+end_src
* QOF improvements
** 0x0.st
   #+begin_src emacs-lisp
     (use-package 0x0 :ensure t :defer 0)
   #+end_src
** Which Key
#+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
#+end_src
** Make <ESC> quit prompts like C-g
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src
** Recent Files
   #+begin_src emacs-lisp
     (require 'recentf)
     (recentf-mode 1)
     (setq recentf-max-menu-items 25)
     (global-set-key "\C-x\ \C-r" 'recentf-open-files)
   #+end_src
** Rainbow Parenthesis
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
  :ensure t
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
** Highlight current line
#+begin_src emacs-lisp
  (when window-system (global-hl-line-mode 1))
#+end_src
** Colour Stuff
#+begin_src emacs-lisp
  (use-package rainbow-mode :ensure t)
(rainbow-mode 1)
#+end_src
** No littering
   #+begin_src emacs-lisp
   (use-package no-littering :ensure t :demand t
  :config
  ;; /etc is version controlled and I want to store mc-lists in git
  (setq mc/list-file (no-littering-expand-etc-file-name "mc-list.el"))
  ;; Put the auto-save files in the var directory to the other data files
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

  (setf custom-safe-themes t)
   #+end_src
** Remember your location in a file
#+begin_src emacs-lisp
(use-package saveplace :ensure t
  :unless noninteractive
  :config (save-place-mode))

#+end_src
** Generic Syntax highlighting
#+begin_src emacs-lisp
(require 'generic-x)

#+end_src
** Buttonize URLs
#+begin_src emacs-lisp
(use-package goto-addr :ensure t
  :hook ((compilation-mode prog-mode vterm-mode shell-mode org-mode) . goto-address-mode)
  :bind (:map goto-address-highlight-keymap
         ("<RET>" . goto-address-at-point)
         ("M-<RET>" . newline)))

#+end_src
** Display a list of keybindings for the current major mode
#+begin_src emacs-lisp
(use-package discover-my-major :ensure t :bind (("C-h C-m" . discover-my-major)))
#+end_src
* Making Emacs look nice
** Modeline
*** Getting Doom Emacs's modeline
    #+begin_src emacs-lisp
                        (use-package all-the-icons :ensure t)

(use-package doom-modeline
  :init (doom-modeline-mode 1)
  :custom ((doom-modeline-height 20)))
    #+end_src
*** Extra Widgets on Modeline
    #+begin_src emacs-lisp
      (require 'display-line-numbers)
      (defcustom display-line-numbers-exempt-modes
        '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
        "Major modes on which to disable line numbers."
        :group 'display-line-numbers
        :type 'list
        :version "green")
      (defun display-line-numbers--turn-on ()
        "Turn on line numbers except for certain major modes.
      Exempt major modes are defined in `display-line-numbers-exempt-modes'."
        (unless (or (minibufferp)
                    (member major-mode display-line-numbers-exempt-modes))
          (display-line-numbers-mode)))
      (global-display-line-numbers-mode)
(global-visual-line-mode t)
    #+end_src
** Theme
   #+begin_src emacs-lisp
          (use-package doom-themes :ensure t :init (load-theme 'doom-dracula))

   #+end_src
** Start screen
#+begin_src emacs-lisp
  (use-package dashboard :ensure t
    :init      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor! It is an Operating System")
    (setq dashboard-startup-banner "~/.emacs.d/emacs-dash.png")  ;; use custom image as banner
    (setq dashboard-center-content nil) ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)
                            (bookmarks . 3)))
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                    (bookmarks . "book"))))
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+end_src
* Git via Magit
#+begin_src emacs-lisp
  (use-package magit :ensure t :defer 0 :commands magit-status :custom  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
         #+end_src

* Programming
** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet :ensure t)
  (use-package yasnippet-snippets :ensure t)
  (yas-global-mode 1)
#+end_src
** LSP + Company
#+begin_src emacs-lisp
          (defun efs/lsp-mode-setup ()
        (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
        (lsp-headerline-breadcrumb-mode))

          (use-package lsp-mode
          :ensure t
        :after (company company-box)
        :commands (lsp lsp-deferred)
        :hook (lsp-mode . efs/lsp-mode-setup)
        :init
        (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
        :config
        ((let* (args)
           )lsp-enable-which-key-integration t))
          (use-package lsp-ui :after lsp-mode
          :ensure t
        :hook (lsp-mode . lsp-ui-mode)
        :custom
        (lsp-ui-doc-position 'bottom))
        (use-package lsp-treemacs :after (lsp-mode lsp-ui)
        :ensure t
          :after lsp)
      (use-package lsp-ivy :ensure t :after (ivy lsp-mode))
    (use-package company
              :ensure t
        :after (lsp-mode)
            :hook (lsp-mode . company-mode)
            :bind (:map company-active-map
                   ("<tab>" . company-complete-selection))
            (:map lsp-mode-map
                  ("<tab>" . company-indent-or-complete-common))

            :custom
            (company-minimum-prefix-length 1)
            (company-idle-delay 0.0))

              (use-package company-box
              :ensure t
            :hook (company-mode . company-box-mode))
        (use-package company-quickhelp :ensure t)
          (company-quickhelp-mode 1)
  (use-package python-mode
    :ensure t
    :hook (python-mode . lsp-deferred))
    (use-package pyvenv
    :ensure t
      :config
      (pyvenv-mode 1))
      (use-package py-autopep8 :ensure t :defer 0)
    (add-hook 'python-mode-hook 'py-autopep8-enable-on-save)
    (use-package company-shell :ensure t
    :hook ((sh-mode shell-mode) . sh-mode-init)
    :config
    (defun sh-mode-init ()
      (setq-local company-backends '((company-shell
                      company-shell-env
                      company-files
                      company-dabbrev-code
                      company-capf
                      company-yasnippet)))))
(global-company-mode t)
#+end_src
** LISP
   #+begin_src emacs-lisp
          (use-package lispy
            :hook ((emacs-lisp-mode . lispy-mode)
                   (scheme-mode . lispy-mode)))

          ;; (use-package evil-lispy
          ;;   :hook ((lispy-mode . evil-lispy-mode)))

          (use-package lispyville
            :hook ((lispy-mode . lispyville-mode))
            :config
            (lispyville-set-key-theme '(operators c-w additional
                                        additional-movement slurp/barf-cp
                                        prettify)))
     (use-package sly
       :mode "\\.lisp\\'")

     (use-package slime
       :mode "\\.lisp\\'")
   #+end_src
** HTML/CSS/JS
Install with
npm install -g vscode-html-languageserver-bin vscode-css-languageserver-bin typescript typescript-language-server
#+begin_src emacs-lisp
(use-package web-mode
  :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
  :config
  (setq-default web-mode-code-indent-offset 2)
  (setq-default web-mode-markup-indent-offset 2)
  (setq-default web-mode-attribute-indent-offset 2))

;; 1. Start the server with `httpd-start'
;; 2. Use `impatient-mode' on any buffer
(use-package impatient-mode)

(use-package skewer-mode)
#+end_src
** Rust
Install rust and then do 
rustup component add rls rust-analysis rust-src
#+begin_src emacs-lisp
  (use-package rust-mode
    :mode "\\.rs\\'"
    :init (setq rust-format-on-save t))

  (use-package cargo
    :ensure t
    :defer t)
#+end_src
** Bash
Install with
npm i -g bash-language-server
** JSON
Install with
npm i -g vscode-json-languageserver
** C/C++
Install clangd or clang-utils from your distros package manager
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'lsp)
  (add-hook 'c++-mode-hook 'lsp)
(use-package compile
  :custom
  (compilation-scroll-output t))

(defun auto-recompile-buffer ()
  (interactive)
  (if (member #'recompile after-save-hook)
      (remove-hook 'after-save-hook #'recompile t)
    (add-hook 'after-save-hook #'recompile nil t)))

#+end_src
** MarkDown
#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode "\\.md\\'"
  :config
  (setq markdown-command "marked")
  (defun dw/set-markdown-header-font-sizes ()
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.0)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

  (defun dw/markdown-mode-hook ()
    (dw/set-markdown-header-font-sizes))

  (add-hook 'markdown-mode-hook 'dw/markdown-mode-hook))
#+end_src
** Auto Close bracket
#+begin_src emacs-lisp
  (use-package smartparens :ensure t)
(smartparens-global-mode 1)
#+end_src
** FlyCheck
#+begin_src emacs-lisp
  (use-package flycheck :ensure t)
(global-flycheck-mode t)
#+end_src
** Highlight indentations
#+begin_src emacs-lisp
(use-package highlight-indent-guides :ensure t
  :hook ((python-mode sass-mode yaml-mode nim-mode) . highlight-indent-guides-mode)
  :config
  ;; Don't highlight first level (that would be a line at column 1)
  (defun my-highlighter (level responsive display)
    (if (> 1 level) ; replace `1' with the number of guides you want to hide
        nil
      (highlight-indent-guides--highlighter-default level responsive display)))

  (setq highlight-indent-guides-highlighter-function 'my-highlighter)
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?\|)
  (setq highlight-indent-guides-auto-odd-face-perc 15)
  (setq highlight-indent-guides-auto-even-face-perc 15)
  (setq highlight-indent-guides-auto-character-face-perc 20)

  (highlight-indent-guides-auto-set-faces))

#+end_src
** Agressive indent
#+begin_src emacs-lisp
(use-package aggressive-indent :ensure t
  :config
  ;; Normally this functions from `indent.el' always displays an
  ;; annoying "reporter" message that it's indenting the current region.
  ;; This patch disables that message
  (defun indent-region-line-by-line (start end)
    (save-excursion
      (setq end (copy-marker end))
      (goto-char start)
      (while (< (point) end)
        (or (and (bolp) (eolp))
            (indent-according-to-mode))
        (forward-line 1))
      (move-marker end nil))))
(global-aggressive-indent-mode t)
#+end_src
** Multiple cursors
#+begin_src emacs-lisp
(use-package multiple-cursors :ensure t
  :bind (("C-c m" . mc/mark-all-dwim)
         ("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         :map mc/keymap
         ("C-x v" . mc/vertical-align-with-space)
         ("C-x n" . mc-hide-unmatched-lines-mode))
  :config
  (global-unset-key (kbd "M-<down-mouse-1>"))
  (global-set-key (kbd "M-<mouse-1>") 'mc/add-cursor-on-click)

  (with-eval-after-load 'multiple-cursors-core
    ;; Immediately load mc list, otherwise it will show as
    ;; changed as empty in my git repo
    (mc/load-lists)

    (define-key mc/keymap (kbd "M-T") 'mc/reverse-regions)
    (define-key mc/keymap (kbd "C-,") 'mc/unmark-next-like-this)
    (define-key mc/keymap (kbd "C-.") 'mc/skip-to-next-like-this)))
#+end_src
* VTerm
#+begin_src emacs-lisp
        (use-package vterm :ensure t :commands vterm :config (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")  (setq vterm-shell "bash") (setq vterm-max-scrollback 10000))
  (global-set-key (kbd "<s-return>") 'vterm)
  (setq vterm-kill-buffer-on-exit t)
(use-package multi-vterm :ensure t
	:config
	(add-hook 'vterm-mode-hook
			(lambda ()
			(setq-local evil-insert-state-cursor 'box)
			(evil-insert-state)))
	(define-key vterm-mode-map [return]                      #'vterm-send-return)

	(setq vterm-keymap-exceptions nil)
	(evil-define-key 'insert vterm-mode-map (kbd "C-e")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-f")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-a")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-v")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-b")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-w")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-u")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-n")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-m")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-p")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-j")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-k")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-r")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-t")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-g")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-c")      #'vterm--self-insert)
	(evil-define-key 'insert vterm-mode-map (kbd "C-SPC")    #'vterm--self-insert)
	(evil-define-key 'normal vterm-mode-map (kbd "C-d")      #'vterm--self-insert)
	(evil-define-key 'normal vterm-mode-map (kbd ",c")       #'multi-vterm)
	(evil-define-key 'normal vterm-mode-map (kbd ",n")       #'multi-vterm-next)
	(evil-define-key 'normal vterm-mode-map (kbd ",p")       #'multi-vterm-prev)
	(evil-define-key 'normal vterm-mode-map (kbd "i")        #'evil-insert-resume)
	(evil-define-key 'normal vterm-mode-map (kbd "o")        #'evil-insert-resume)
	(evil-define-key 'normal vterm-mode-map (kbd "<return>") #'evil-insert-resume))
#+end_src

* PDF
#+begin_src emacs-lisp
  (use-package pdf-tools 
    :ensure t)
  (pdf-tools-install)
  (setq pdf-annot-activate-created-annotations t)
  (define-key pdf-view-mode-map (kbd "C-f") 'isearch-forward)
#+end_src
* Dired
#+begin_src emacs-lisp
     (use-package dired-hide-dotfiles
       :ensure t
       :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "H" 'dired-hide-dotfiles-mode))
     (use-package dired
       :ensure nil
       :commands (dired dired-jump)
       :bind (("C-x C-j" . dired-jump))
       :custom ((dired-listing-switches "-agho --group-directories-first"))
       :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "h" 'dired-single-up-directory
         "l" 'dired-single-buffer
         (kbd "S-<return>") 'dired-single-buffer
         (kbd "RET") 'dired-single-buffer))

     (use-package dired-single)

     (use-package all-the-icons-dired
       :hook (dired-mode . all-the-icons-dired-mode))

     (use-package dired-open
       :config
       ;; Doesn't work as expected!
       ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
       (setq dired-open-extensions '(("png" . "feh")
                                     ("mkv" . "mpv"))))

     (use-package dired-hide-dotfiles
       :hook (dired-mode . dired-hide-dotfiles-mode)
       :config
       (evil-collection-define-key 'normal 'dired-mode-map
         "H" 'dired-hide-dotfiles-mode))


#+end_src

* Tabs
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :config
    (setq centaur-tabs-style "bar"
       centaur-tabs-height 32
       centaur-tabs-set-icons t
       centaur-tabs-set-modified-marker t
       centaur-tabs-show-navigation-buttons t
       centaur-tabs-set-bar 'under
       x-underline-at-descent-line t)
    (centaur-tabs-headline-match)
    ;; (setq centaur-tabs-gray-out-icons 'buffer)
    ;; (centaur-tabs-enable-buffer-reordering)
    ;; (setq centaur-tabs-adjust-buffer-order t)
    (centaur-tabs-mode t)
    (setq uniquify-separator "/")
    (setq uniquify-buffer-name-style 'forward)
    (defun centaur-tabs-buffer-groups ()
      "`centaur-tabs-buffer-groups' control buffers' group rules.

  Group centaur-tabs with mode if buffer is derived from `eshell-mode' `emacs-lisp-mode' `dired-mode' `org-mode' `magit-mode'.
  All buffer name start with * will group to \"Emacs\".
  Other buffer group by `centaur-tabs-get-group-name' with project name."
      (list
       (cond
     ;; ((not (eq (file-remote-p (buffer-file-name)) nil))
     ;; "Remote")
     ((or (string-equal "*" (substring (buffer-name) 0 1))
          (memq major-mode '(magit-process-mode
                 magit-status-mode
                 magit-diff-mode
                 magit-log-mode
                 magit-file-mode
                 magit-blob-mode
                 magit-blame-mode
                 )))
      "Emacs")
     ((derived-mode-p 'prog-mode)
      "Editing")
     ((derived-mode-p 'dired-mode)
      "Dired")
     ((memq major-mode '(helpful-mode
                 help-mode))
      "Help")
     ((memq major-mode '(org-mode
                 org-agenda-clockreport-mode
                 org-src-mode
                 org-agenda-mode
                 org-beamer-mode
                 org-indent-mode
                 org-bullets-mode
                 org-cdlatex-mode
                 org-agenda-log-mode
                 diary-mode))
      "OrgMode")
     (t
      (centaur-tabs-get-group-name (current-buffer))))))
    :hook
    (dashboard-mode . centaur-tabs-local-mode)
    (vterm-mode . centaur-tabs-local-mode)
    (calendar-mode . centaur-tabs-local-mode)
    (org-agenda-mode . centaur-tabs-local-mode)
    (pdf-tools-mode . centaur-tabs-local-mode)
    (helpful-mode . centaur-tabs-local-mode)
    (ranger-mode . centaur-tabs-local-mode)
    (dired-mode . centaur-tabs-local-mode)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward)
    ("C-c t s" . centaur-tabs-counsel-switch-group)
    ("C-c t p" . centaur-tabs-group-by-projectile-project)
    ("C-c t g" . centaur-tabs-group-buffer-groups)
    (:map evil-normal-state-map
       ("g t" . centaur-tabs-forward)
       ("g T" . centaur-tabs-backward)))

  #+end_src

* Unicode Support
#+begin_src emacs-lisp

  (defun dw/replace-unicode-font-mapping (block-name old-font new-font)
    (let* ((block-idx (cl-position-if
                           (lambda (i) (string-equal (car i) block-name))
                           unicode-fonts-block-font-mapping))
           (block-fonts (cadr (nth block-idx unicode-fonts-block-font-mapping)))
           (updated-block (cl-substitute new-font old-font block-fonts :test 'string-equal)))
      (setf (cdr (nth block-idx unicode-fonts-block-font-mapping))
            `(,updated-block))))

  (use-package unicode-fonts
    :ensure t
    :custom
    (unicode-fonts-skip-font-groups '(low-quality-glyphs))
    :config
    ;; Fix the font mappings to use the right emoji font
    (mapcar
      (lambda (block-name)
        (dw/replace-unicode-font-mapping block-name "Apple Color Emoji" "Noto Color Emoji"))
      '("Dingbats"
        "Emoticons"
        "Miscellaneous Symbols and Pictographs"
        "Transport and Map Symbols"))
    (unicode-fonts-setup))


#+end_src

* Emoji
#+begin_src emacs-lisp
  (use-package emojify
  :ensure t
    :hook (erc-mode . emojify-mode)
    :commands emojify-mode)
#+end_src
* Notifications
#+begin_src emacs-lisp
  (use-package alert
  :ensure t
    :commands alert
    :config
    (setq alert-default-style 'libnotify))
(global-emojify-mode t)
#+end_src
* Auto Save
#+begin_src emacs-lisp
  (use-package super-save
  :ensure t
    :diminish super-save-mode
    :config
    (super-save-mode +1)
    (setq super-save-auto-save-when-idle t))
#+end_src

* Evil Nerd Commenter
#+begin_src emacs-lisp

  (use-package evil-nerd-commenter
  :ensure t
    :bind ("M-/" . evilnc-comment-or-uncomment-lines))


#+end_src

* Telegram
#+begin_src emacs-lisp
  (use-package telega :ensure t)
  (define-key global-map (kbd "C-c t") telega-prefix-map)
  (setq telega-completing-read-function 'ivy-completing-read)
  (setq telega-emoji-company-backend 'telega-company-emoji)
  (setq telega-directory "~/.local/share/telega")
#+end_src

* AutoSave
#+begin_src emacs-lisp
(setq auto-save-list-file-prefix "~/.config/emacs/autosave/")
(setq auto-save-file-name-transforms '((".*" "~/.config/emacs/autosave/" t)))
(setq server-use-tcp t)

#+end_src
* Undo Session persist
#+begin_src emacs-lisp
(use-package undo-fu-session :ensure t)
  (global-undo-fu-session-mode)
#+end_src
* PDF Restore
#+begin_src emacs-lisp
  (use-package pdf-view-restore
  :ensure t
    :after pdf-tools
    (add-hook 'pdf-view-mode-hook 'pdf-view-restore-mode))
  (setq pdf-view-restore-filename "~/.emacs.d/.pdf-view-restore")

#+end_src

* Misc
#+begin_src emacs-lisp
  (setq-default
   indent-tabs-mode nil                             ; Prefers spaces over tabs
   load-prefer-newer t                              ; Prefers the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   vc-follow-symlinks t                             ; Always follow the symlinks
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
  (setq large-file-warning-threshold nil)
#+end_src
* Better C-x o
#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src
* Hide ModeLine
#+begin_src emacs-lisp
  (use-package hide-mode-line :ensure t :hook (vterm-mode . hide-mode-line-mode)(dashboard-mode . hide-mode-line-mode)(pdf-tools-mode . hide-mode-line-mode)(ranger-mode . hide-mode-line-mode)(dired-mode . hide-mode-line-mode))
#+end_src

* M-x History
  #+begin_src emacs-lisp
(use-package smex)
  #+end_src

* Org Preview
  #+begin_src emacs-lisp
    (use-package org-preview-html :ensure t)
;; (use-package html-preview
  ;; :ensure '(html-preview :host github :repo "punchagan/html-preview"))
  #+end_src
* MU4E
** base
  #+begin_src emacs-lisp
            (use-package mu4e :ensure nil)
                      (setq mu4e-change-filenames-when-moving t)

                      ;; Refresh mail using isync every 10 minutes
                      (setq mu4e-update-interval (* 10 60))
                      (setq mu4e-maildir "~/Mail")
         ;; Make sure plain text mails flow correctly for recipients
          (setq mu4e-compose-format-flowed t)
     ;; Configure the function to use for sending mail
      (setq message-send-mail-function 'smtpmail-send-it)
                      (setq mu4e-drafts-folder "/[Gmail]/Drafts")
                      (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
                      (setq mu4e-refile-folder "/[Gmail]/All Mail")
                      (setq mu4e-trash-folder  "/[Gmail]/Trash")

                      (setq mu4e-maildir-shortcuts
                          '(("/Inbox"             . ?i)
                            ("/[Gmail]/Sent Mail" . ?s)
                            ("/[Gmail]/Trash"     . ?t)
                            ("/[Gmail]/Drafts"    . ?d)
                            ("/[Gmail]/All Mail"  . ?a)))
(setq mu4e-completing-read-function 'ivy-completing-read)

                    (setq mu4e-maildir-shortcuts
                        '((:maildir "/Inbox"    :key ?i)
                          (:maildir "/[Gmail]/Sent Mail" :key ?s)
                          (:maildir "/[Gmail]/Trash"     :key ?t)
                          (:maildir "/[Gmail]/Drafts"    :key ?d)
                          (:maildir "/[Gmail]/All Mail"  :key ?a)))
            (setq mu4e-get-mail-command "mbsync -a && pkill -2 -u 1000 mu && sleep 1 && mu index --maildir=/home/ak/Mail"
                  mu4e-update-interval 120
                  mu4e-headers-auto-update t)
        (setq mu4e-split-view 'vertical)
                (setq mu4e-maildir-shortcuts
                    '((:maildir "/Inbox"    :key ?i)
                      (:maildir "/[Gmail]/Sent Mail" :key ?s)
                      (:maildir "/[Gmail]/Trash"     :key ?t)
                      (:maildir "/[Gmail]/Drafts"    :key ?d)
                      (:maildir "/[Gmail]/All Mail"  :key ?a)))
  #+end_src

** xwidget based preview
   #+begin_src emacs-lisp
     (use-package mu4e-views
  :ensure t
       :after mu4e
       :defer nil
       :bind (:map mu4e-headers-mode-map
             ("v" . mu4e-views-mu4e-select-view-msg-method) ;; select viewing method
             ("M-n" . mu4e-views-cursor-msg-view-window-down) ;; from headers window scroll the email view
             ("M-p" . mu4e-views-cursor-msg-view-window-up) ;; from headers window scroll the email view
             ("f" . mu4e-views-toggle-auto-view-selected-message) ;; toggle opening messages automatically when moving in the headers view
             ("i" . mu4e-views-mu4e-view-as-nonblocked-html) ;; show currently selected email with all remote content
             )
       :config
       (setq mu4e-views-completion-method 'ivy) ;; use ivy for completion
       (setq mu4e-views-default-view-method "html") ;; make xwidgets default
       (mu4e-views-mu4e-use-view-msg-method "html") ;; select the default
       (setq mu4e-views-next-previous-message-behaviour 'stick-to-current-window) ;; when pressing n and p stay in the current window
       (setq mu4e-views-auto-view-selected-message t))
   #+end_src
** Icons
   #+begin_src emacs-lisp
(use-package mu4e-marker-icons
  :ensure t
  :init (mu4e-marker-icons-mode 1))
   #+end_src
** ORG Mail
   #+begin_src emacs-lisp
     (use-package org-mime :ensure t)
   #+end_src
** Notifications
   #+begin_src emacs-lisp
     (use-package mu4e-alert :ensure t)
     (mu4e-alert-set-default-style 'libnotify)
     (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
     (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)
     (setq mu4e-alert-interesting-mail-query
           (concat
            "flag:unread"
            " AND NOT flag:trashed"
            " AND NOT maildir:"
            "\"/[Gmail].All Mail\""))
     (setq mu4e-alert-email-notification-types '(count))
   #+end_src
* GPG
  #+begin_src emacs-lisp
  (use-package epa :ensure t
  :defer t
  :config
  ;; Always replace encrypted text with plain text version
  (setq epa-replace-original-text t))
(use-package epg :ensure t
  :defer t
  :config
  ;; Let Emacs query the passphrase through the minibuffer
  (setq epg-pinentry-mode 'loopback))
  #+end_src
* HASKELL
  #+begin_src emacs-lisp
(use-package haskell-mode)
  #+end_src

* Emacsclient
  #+begin_src emacs-lisp
    (if (daemonp)
        (message "Loading in the daemon!")
      (message "Loading in regular Emacs!"))
    (setq doom-modeline-icon t)
(use-package diminish
  :ensure t
  :init
  (diminish 'which-key-mode)
  (diminish 'linum-relative-mode)
  (diminish 'hungry-delete-mode)
  (diminish 'visual-line-mode)
  (diminish 'subword-mode)
  (diminish 'beacon-mode)
  (diminish 'page-break-lines-mode)
  (diminish 'auto-revert-mode)
  (diminish 'rainbow-delimiters-mode)
  (diminish 'rainbow-mode)
  (diminish 'yas-minor-mode)
  (diminish 'flycheck-mode))

    (setq backup-directory-alist `(("." . ,(expand-file-name "tmp/backups/" user-emacs-directory))))
    (make-directory (expand-file-name "tmp/auto-saves/" user-emacs-directory) t)
    (setq auto-save-list-file-prefix (expand-file-name "tmp/auto-saves/sessions/" user-emacs-directory)
          auto-save-file-name-transforms `((".*" ,(expand-file-name "tmp/auto-saves/" user-emacs-directory) t)))
    (setq create-lockfiles nil)
  #+end_src

* Special scratch buffers
  #+begin_src emacs-lisp
        (defun xah-new-empty-buffer ()
          "Create a new empty buffer.
        New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc.

        It returns the buffer (for elisp programing).

        URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'
        Version 2017-11-01"
          (interactive)
          (let (($buf (generate-new-buffer "untitled")))
            (switch-to-buffer $buf)
            (funcall initial-major-mode)
            (setq buffer-offer-save t)
            $buf
            ))
    (defun python-scratch () (interactive) (xah-new-empty-buffer)(python-mode)(company-mode))
    (defun emacs-lisp-scratch () (interactive) (xah-new-empty-buffer)(emacs-lisp-mode)(company-mode))
    (defun sh-scratch () (interactive) (xah-new-empty-buffer)(sh-mode)(company-mode))
    (defun c-scratch () (interactive) (xah-new-empty-buffer)(c-mode)(company-mode))
    (defun sh-scratch () (interactive) (xah-new-empty-buffer)(sh-mode)(company-mode))
    (defun org-scratch () (interactive) (xah-new-empty-buffer)(org-mode))
  #+end_src
* General.el Keybindings
#+begin_src emacs-lisp
      (use-package general :ensure t)

      (general-define-key
       :keymaps '(normal insert visual emacs)
       :prefix "SPC"
       :global-prefix "C-SPC"

         "bb" 'ibuffer 
         "bk" 'kill-current-buffer
         "bn" 'next-buffer 
         "bp" 'previous-buffer 
         "bB" 'ibuffer-list-buffers 
         "bK" 'kill-buffer
         "eb" 'eval-buffer 
         "ed" 'eval-defun 
         "ee" 'eval-expression 
         "el" 'eval-last-sexp
         "er" 'eval-region 
         "ld" 'xref-find-definitions
         "lr" 'xref-find-references
         "ln" 'lsp-ui-find-next-reference
         "lp" 'lsp-ui-find-prev-reference
         "ls" 'counsel-imenu
         "le" 'lsp-ui-flycheck-list
         "lS" 'lsp-ui-sideline-mode
         "lX" 'lsp-execute-code-action
         "sp" 'python-scratch
         "sl" 'emacs-lisp-scratch
         "sc" 'c-scratch
         "so" 'org-scratch
         "ss" 'sh-scratch
         "ds" 'sudo-edit
         "dd" 'counsel-find-file
         "gf" 'epa-encrypt-file
         "gr" 'epa-encrypt-region
         "gme" 'epa-mail-encrypt
         "gmd" 'epa-mail-decrypt
         "gms" 'epa-mail-sign
         "gmv" 'epa-mail-verify
         "gki" 'epa-import-keys
         "gkd" 'epa-delete-keys
         "gkl" 'epa-list-keys
         "rt" 'newsticker-treeview
         "rs" 'newsticker-start
         "ra" 'newsticker-add-url
         "."     '(find-file :which-key "Find file")
         "d r"   '(counsel-recentf :which-key "Recent files")
         "d s"   '(save-buffer :which-key "Save file")
         "d c"   '(copy-file :which-key "Copy file")
         "d D"   '(delete-file :which-key "Delete file")
         "d r"   '(rename-file :which-key "Rename file")
         "f S"   '(write-file :which-key "Save file as...")
         "SPC" 'counsel-M-x)
  (use-package sudo-edit :ensure t) ;; Utilities for opening files with sudo
#+end_src
* ORG Blog
  #+begin_src emacs-lisp
;; TODO
  #+end_src

* Auto Update
  #+begin_src bash
    (use-package auto-package-update
      :custom
      (auto-package-update-interval 7)
      (auto-package-update-prompt-before-update t)
      (auto-package-update-hide-results t)
      :config
      (auto-package-update-maybe)
      (auto-package-update-at-time "09:00"))
  #+end_src

* Passwords
  #+begin_src bash

(defun efs/lookup-password (&rest keys)
  (let ((result (apply #'auth-source-search keys)))
    (if result
        (funcall (plist-get (car result) :secret))
        nil)))


  #+end_src

* ORG Roam
  #+begin_src emacs-lisp
          (use-package org-roam ;; Package is on melpa
            :ensure t
            :custom
          (make-directory "~/org-roam") ;; The dir all notes are gonna be stored
          (setq org-roam-directory (file-truename "~/org-roam"))
          :bind (("C-c n l" . org-roam-buffer-toggle) ;; Binds
                 ("C-c n f" . org-roam-node-find)
                 ("C-c n g" . org-roam-graph) ;; Graph i was talking about.
                 ("C-c n i" . org-roam-node-insert)
                 ("C-c n c" . org-roam-capture)
                 ;; Dailies
                 ("C-c n j" . org-roam-dailies-capture-today))
          :config
          ;; If using org-roam-protocol
          (require 'org-roam-protocol))
          ;; (use-package org-roam-server) ;; There is server but havent gotten it  to work yet
          ;; (setq org-roam-server-host "127.0.0.1"
          ;;       org-roam-server-port 8080
          ;;       org-roam-server-authenticate t
          ;;       org-roam-server-export-inline-images t
          ;;       org-roam-server-serve-files t
          ;;       org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
          ;;       org-roam-server-network-poll t
          ;;       org-roam-server-network-arrows nil
          ;;       org-roam-server-network-label-truncate t
          ;;       org-roam-server-network-label-truncate-length 60
          ;;       org-roam-server-network-label-wrap-length 20)
      (add-to-list 'display-buffer-alist
                   '("\\*org-roam\\*"
                     (display-buffer-in-direction)
                     (direction . right)
                     (window-width . 0.33)
                     (window-height . fit-window-to-buffer)))
      (setq org-roam-completion-everywhere t)
    ;;   (setq org-roam-capture-templates '(("d" "default" plain "%?"
    ;; :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
    ;;                    "#+title: ${title}\n"
    ;;                    "#+filetags: ")
    ;; :unnarrowed t))

          (org-roam-setup)
  #+end_src

* Battery
  #+begin_src emacs-lisp
    (use-package fancy-battery
      :ensure t
      :init
      (fancy-battery-mode 1)
      (setq fancy-battery-show-percentage t))
    (global-subword-mode 1)
  #+end_src
* Hungry delay
  #+begin_src emacs-lisp
(use-package hungry-delete
  :ensure t
  :config (global-hungry-delete-mode))
  #+end_src

* EXpand Region
  #+begin_src emacs-lisp
(use-package expand-region
  :ensure t
  :bind ("C-q" . er/expand-region))
  #+end_src

* Temp Maiximizze
  #+begin_src emacs-lisp
(defun toggle-maximize-buffer () "Maximize buffer"
       (interactive)
       (if (= 1 (length (window-list)))
           (jump-to-register '_)
         (progn
           (set-register '_ (list (current-window-configuration)))
           (delete-other-windows))))
(global-set-key [(super shift return)] 'toggle-maximize-buffer) 
  #+end_src
* Quelpa
  #+begin_src emacs-lisp
(unless (package-installed-p 'quelpa)
  (with-temp-buffer
    (url-insert-file-contents "https://raw.githubusercontent.com/quelpa/quelpa/master/quelpa.el")
    (eval-buffer)
    (quelpa-self-upgrade)))
  #+end_src
* PDF continuos scroll
  #+begin_src emacs-lisp
    (quelpa '(pdf-continuous-scroll-mode :fetcher git :url "https://github.com/dalanicolai/pdf-continuous-scroll-mode.el.git"))
    (add-hook 'pdf-view-mode-hook 'pdf-continuous-scroll-mode)
  #+end_src
