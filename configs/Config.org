#+TITLE: One File for allmy configs lmao
#+AUTHOR: Arya
#+auto_tangle: t
* Emacs
:PROPERTIES:
:header-args:emacs-lisp: :tangle "~/.emacs.d/init.el"
:END:
** Init Straight
#+begin_src emacs-lisp

  ;; configure straight.el
  (setq
   ;; avoid checking packages on startup to speed it up
   straight-check-for-modifications '(check-on-save)
   ;; put all autoloads into a single file
   straight-cache-autoloads t)

  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
#+end_src
** Basic
#+begin_src emacs-lisp
    (setq inhibit-startup-screen t)
    (line-number-mode t)
    (column-number-mode t)
    (size-indication-mode t) ; Displays the File Size in the modeline
    (setq auto-window-vscroll nil)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-hl-line-mode +1)
    (setq native-comp-async-report-warnings-errors nil)
    (setq comp-async-report-warnings-errors nil)
    (use-package gcmh :straight t :config (gcmh-mode 1))
    (delete-selection-mode t)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (load "~/.emacs.d/sensible-defaults.el")
  (sensible-defaults/use-all-settings)
  (sensible-defaults/use-all-keybindings)
  (sensible-defaults/backup-to-temp-directory)
  (use-package no-littering
    :demand t
    :config
    ;; /etc is version controlled and I want to store mc-lists in git
    (setq mc/list-file (no-littering-expand-etc-file-name "mc-list.el"))
    ;; Put the auto-save files in the var directory to the other data files
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t))))

  (use-package custom
  :straight nil
    :config
    ;; We don't use custom and don't have to set custom-file even
    ;; in the case when we "accidentally" click save in a custom buffer,
    ;; `init.el' would get modified which gets overwrite the next time
    ;; we run `make'.

    ;; Treat all themes as safe
    (setf custom-safe-themes t))
  (setq user-full-name "Arya Kiran"
        user-mail-address "aryakiran@zohomail.eu")
  (require 'generic-x)
  (require 'display-line-numbers)
  (defcustom display-line-numbers-exempt-modes
    '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode pdf-view-mode)
    "Major modes on which to disable line numbers."
    :group 'display-line-numbers
    :type 'list
    :version "green")
  (defun display-line-numbers--turn-on ()
    "Turn on line numbers except for certain major modes.
        Exempt major modes are defined in `display-line-numbers-exempt-modes'."
    (unless (or (minibufferp)
                (member major-mode display-line-numbers-exempt-modes))
      (display-line-numbers-mode)))
  (global-display-line-numbers-mode)
  (global-visual-line-mode t)
  ;; Increase the amount of data which Emacs reads from the process
  ;; (Useful for LSP where the LSP responses are in the 800k - 3M range)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  ;; Don't compact font caches during GC as it doesn't play too nice
  ;; with org-superstar-mode and some of my large org files (e.g. this file).
  ;; This might enlarge the Emacs memory footprint but I don't mind if Emacs
  ;; uses more memory but rather prefer speed.
  (setq inhibit-compacting-font-caches t)
  ;; Always just use left-to-right text
  ;; This makes Emacs a bit faster for very long lines
  (setq-default bidi-paragraph-direction 'left-to-right)
  (use-package saveplace :straight nil
    :unless noninteractive
    :config (save-place-mode))
  (use-package savehist :straight nil
    :unless noninteractive
    :defer 1
    :config
    (setq savehist-additional-variables '(compile-command kill-ring regexp-search-ring))
    (savehist-mode 1))
  (global-so-long-mode)
  (setq-default indent-tabs-mode nil)   ; don't use tabs to indent
  (setq-default tab-width 4)            ; but maintain correct appearance
  ;; smart tab behavior - indent or complete
  (setq tab-always-indent 'complete)
  ;; Newline at end of file
  (setq require-final-newline t)
  ;; Default to utf-8 unix encoding
  (prefer-coding-system 'utf-8-unix)
  ;; Delete the selection with a keypress
  (delete-selection-mode t)
  ;; Activate character folding in searches i.e. searching for 'a' matches 'ä' as well
  (setq search-default-mode 'char-fold-to-regexp)
  ;; Paste with middle mouse button doesn't move the cursor
  (setq mouse-yank-at-point t)
  ;; Save whatever’s in the current (system) clipboard before
  ;; replacing it with the Emacs’ text.
  (setq save-interprogram-paste-before-kill t)
  ;; Accept 'UTF-8' (uppercase) as a valid encoding in the coding header
  (define-coding-system-alias 'UTF-8 'utf-8)
  ;; Put authinfo.gpg first so new secrets will be stored there by default and not in plain text
  (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  ;; Don't ask to store credentials in .authinfo.gpg
  (setq auth-source-save-behavior nil)
  ;; Silence ad-handle-definition about advised functions getting redefined
  (setq ad-redefinition-action 'accept)
  ;; Use 'fancy' ellipses for truncated strings
  (setq truncate-string-ellipsis  " ▾")
  ;; Increase the 'Limit on number of Lisp variable bindings and unwind-protects.'
  ;; mu4e seems to need more sometimes and it can be safely increased.
  (setq max-specpdl-size 8192)
  ;; Increase the limit to catch infinite recursions.
  ;; Large scala files need sometimes more and this value can safely be increased.
  (setq max-lisp-eval-depth 32768)
  (setq-default
   indent-tabs-mode nil                             ; Prefers spaces over tabs
   load-prefer-newer t                              ; Prefers the newest version of a file
   mark-ring-max 128                                ; Maximum length of mark ring
   read-process-output-max (* 1024 1024)            ; Increase the amount of data reads from the process
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   tab-width 4                                      ; Set width for tabs
   view-read-only t)                                ; Always open read-only buffers in view-mode
  (cd "~/")                                         ; Move to the user directory
  (column-number-mode 1)                            ; Show the column number
  (global-hl-line-mode)                             ; Hightlight current line
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show the parent
  (setq large-file-warning-threshold nil)
  (setq kill-buffer-query-functions (delq 'process-kill-buffer-query-function kill-buffer-query-functions))
#+end_src
** EWM
#+RESULTS:
: hello

#+begin_src emacs-lisp :exports both
  (straight-use-package
   '(app-launcher :type git :host github :repo "SebastienWae/app-launcher"))

  (use-package exwm
    :init
    (setq mouse-autoselect-window nil
          focus-follows-mouse t
          exwm-workspace-warp-cursor t
          exwm-workspace-number 5)
                                          ;exwm-workspace-display-echo-area-timeout 5
                                          ;exwm-workspace-minibuffer-position 'bottom ;; Annoying focus issues
    :config
    ;; Make class name the buffer name
    (add-hook 'exwm-update-class-hook
              (lambda ()
                (exwm-workspace-rename-buffer exwm-class-name)))

    (exwm-enable))
  (defun exwm/run-in-background (command)
    (let ((command-parts (split-string command "[ ]+")))
      (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))

  (defun exwm/bind-function (key invocation &rest bindings)
    "Bind KEYs to FUNCTIONs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (funcall ',invocation)))
      (setq key (pop bindings)
            invocation (pop bindings))))

  (defun exwm/bind-command (key command &rest bindings)
    "Bind KEYs to COMMANDs globally"
    (while key
      (exwm-input-set-key (kbd key)
                          `(lambda ()
                             (interactive)
                             (exwm/run-in-background ,command)))
      (setq key (pop bindings)
            command (pop bindings))))
  (defun dw/exwm-init-hook ()
    (with-eval-after-load 'perspective
      ;; Set up perspective names on initial workspaces
      (exwm-workspace-switch-create 1)
      (exwm-workspace-switch-create 2)
      (exwm-workspace-switch-create 3)
      (exwm-workspace-switch-create 4)
            ;;       ;; Make workspace 1 be the one where we land at startup
      (exwm-workspace-switch-create 1)

          (exwm/run-in-background "dunst")
      (exwm/run-in-background "flameshot")
      (exwm/run-in-background "schildichat-desktop --hidden")
      (exwm/run-in-background "lxsession")
      (exwm/run-in-background "picom")))

    (defun dw/setup-window-by-class ()
      (interactive)
      (pcase exwm-class-name
        ("Emacs" (call-interactively #'exwm-input-toggle-keyboard))
        ("discord" (exwm-workspace-move-window 3))
        ("Microsoft Teams - Preview" (exwm-workspace-move-window 3))
        ("Spotify" (exwm-workspace-move-window 4))
        ("Vimb" (exwm-workspace-move-window 2))
        ("qutebrowser" (exwm-workspace-move-window 2))
        ("qjackctl" (exwm-floating-toggle-floating))
        ("mpv" (exwm-floating-toggle-floating)
         (dw/exwm-floating-toggle-pinned))
        ("gsi" (exwm-input-toggle-keyboard))))

    ;; Do some post-init setup
    (add-hook 'exwm-init-hook #'dw/exwm-init-hook)

    ;; Manipulate windows as they're created
    (add-hook 'exwm-manage-finish-hook
              (lambda ()
                ;; Send the window where it belongs
                (dw/setup-window-by-class)))

    ;;                 ;; Hide the modeline on all X windows
    (exwm-layout-hide-mode-line)
(display-time)
    ;; Hide the modeline on all X windows
    (add-hook 'exwm-floating-setup-hook
            (lambda ()
              (exwm-layout-hide-mode-line)))

    (use-package exwm-systemtray :straight nil
    :after (exwm)
    :config
    (exwm-systemtray-enable)
    (setq exwm-systemtray-height 20))

  (setq dw/panel-process nil)
  (defun dw/kill-panel ()
    (interactive)
    (when dw/panel-process
      (ignore-errors
        (kill-process dw/panel-process)))
    (setq dw/panel-process nil))

  (defun dw/start-panel ()
    (interactive)
    (dw/kill-panel)
    (setq dw/panel-process (start-process-shell-command "polybar" nil "polybar panel")))
  (setq exwm-workspace-index-map
        (lambda (index) (number-to-string (1+ index))))

  (dotimes (i 10)
    (exwm-input-set-key (kbd (format "s-%d" i))
                        `(lambda ()
                           (interactive)
                           (exwm-workspace-switch-create (1- ,i)))))

  (defun dw/configure-desktop ()
    (interactive)
    (dw/run-xmodmap)
    (dw/update-screen-layout)
    (run-at-time "2 sec" nil (lambda () (dw/update-wallpapers))))

  (defun dw/on-exwm-init ()
    (dw/configure-desktop))
  (setq exwm-input-prefix-keys
        '(?\C-x
          ?\C-h
          ?\M-x
          ?\M-`
          ?\M-&
          ?\M-:
          ?\C-\M-j  ;; Buffer list
          ?\C-\M-k  ;; Browser list
          ?\C-\M-n  ;; Next workspace
          ?\C-\     ;; Ctrl+Space
          ?\C-\;))

  ;;     ;; Ctrl+Q will enable the next key to be sent directly
  ;;     (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  (use-package desktop-environment
    :after exwm
    :config (desktop-environment-mode)
    :custom
    (desktop-environment-brightness-small-increment "2%+")
    (desktop-environment-brightness-small-decrement "2%-")
    (desktop-environment-brightness-normal-increment "5%+")
    (desktop-environment-brightness-normal-decrement "5%-")
    (desktop-environment-screenshot-command "flameshot gui"))

  ;; This needs a more elegant ASCII banner

  ;; Workspace switching
  (setq exwm-input-global-keys
        `(([?\s-\C-r] . exwm-reset)
          ([?\s-w] . exwm-workspace-switch)
          ([?\s-r] . hydra-exwm-move-resize/body)
          ([?\s-e] . dired-jump)
          ([?\s-E] . (lambda () (interactive) (dired "~")))
          ([?\s-Q] . (lambda () (interactive) (kill-buffer)))
          ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))
  (exwm-input-set-key (kbd "<s-return>") 'multi-vterm)
  (exwm-input-set-key (kbd "s-SPC") 'app-launcher-run-app)
  (exwm-input-set-key (kbd "s-f") 'exwm-layout-toggle-fullscreen)
  (setq exwm-input-global-keys
        `(([?\s-h] . windmove-left)
          ([?\s-l] . windmove-right)
          ([?\s-j] . other-window)
          ([?\s-k] . (lambda (&optional arg) (other-window -1)))

          ([?\s-q] . kill-this-buffer)

          ;; tile exwm
          ([?\s-t] . exwm-reset)

          ;; screen and audio controls
          (,(kbd "C-s-f") . (lambda ()
                              (interactive)
                              (start-process-shell-command "Vol ↑" nil "pactl -- set-sink-volume 0 +10%")))
          (,(kbd "C-s-a") . (lambda ()
                              (interactive)
                              (start-process-shell-command "Vol ↓" nil "pactl -- set-sink-volume 0 -10%")))
          (,(kbd "C-s-d") . (lambda ()
                              (interactive)
                              (start-process-shell-command "Brightness ↑" nil "xbacklight -dec 5")))
          (,(kbd "C-s-s") . (lambda ()
                              (interactive)
                              (start-process-shell-command "Brightness ↓" nil "xbacklight -inc 5")))
          ;; web browser
          ([?\s-w] . browser)))
#+end_src

** Popper
#+begin_src emacs-lisp
  (use-package popper
    :straight t ; or :straight t
    :bind (("C-`"   . popper-toggle-latest)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "\\*rustic-compilation\\*"
            "\\*rustfmt\\*"
            "Output\\*$"
            "\\*Backtrace\\*"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode))
    (setq popper-mode-line nil)
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src
** IVY
  I tried helm but the UI was not my taste
  I just got used to ivy
  #+begin_src emacs-lisp
                ;; (use-package ivy
                ;;   :straight t
                ;;   :bind (("C-s" . swiper)
                ;;          :map ivy-minibuffer-map
                ;;          ("TAB" . ivy-alt-done)
                ;;          ("M-TAB" . ivy-immediate-done)
                ;;          ("C-l" . ivy-alt-done)
                ;;          ("C-j" . ivy-next-line)
                ;;          ("C-k" . ivy-previous-line)
                ;;          :map ivy-switch-buffer-map
                ;;          ("C-k" . ivy-previous-line)
                ;;          ("C-l" . ivy-done)
                ;;          ("C-d" . ivy-switch-buffer-kill)
                ;;          :map ivy-reverse-i-search-map
                ;;          ("C-k" . ivy-previous-line)
                ;;          ("C-d" . ivy-reverse-i-search-kill))
                ;;   :config
                ;;   (ivy-mode 1))
                ;;     (use-package ivy-rich :after counsel
                ;;   :straight t
                ;;   :init
                ;;   (ivy-rich-mode 1))
                ;; (use-package counsel
                ;;   :straight t
                ;;   :bind (("M-x" . counsel-M-x)
                ;;          ("<menu>" . counsel-M-x)
                ;;          ("C-x b" . counsel-switch-buffer)
                ;;          ("C-x C-f" . counsel-find-file)
                ;;          :map minibuffer-local-map
                ;;    ("C-r" . 'counsel-minibuffer-history))
                ;;   :config
                ;;   (counsel-mode 1))

                ;; (use-package ivy-prescient :after counsel
                ;;   :custom
                ;;   (ivy-prescient-enable-filtering nil)
                ;;   :config
                ;;   (prescient-persist-mode 1)
                ;;   (ivy-prescient-mode t))

        (use-package savehist
          :config
          (setq history-length 25)
          (savehist-mode 1))

          ;; Individual history elements can be configured separately
          ;;(put 'minibuffer-history 'history-length 25)
          ;;(put 'evil-ex-history 'history-length 50)
          ;;(put 'kill-ring 'history-length 25))


        (defun dw/minibuffer-backward-kill (arg)
          "When minibuffer is completing a file name delete up to parent
        folder, otherwise delete a word"
          (interactive "p")
          (if minibuffer-completing-file-name
              ;; Borrowed from https://github.com/raxod502/selectrum/issues/498#issuecomment-803283608
              (if (string-match-p "/." (minibuffer-contents))
                  (zap-up-to-char (- arg) ?/)
                (delete-minibuffer-contents))
              (backward-kill-word arg)))

        (use-package vertico
           :straight '(vertico :host github
                               :repo "minad/vertico"
                               :branch "main"
                               :files ("*.el" "extensions/*.el"))
          :bind (:map vertico-map
                 ("C-j" . vertico-next)
                 ("C-k" . vertico-previous)
                 ("C-f" . vertico-exit)
                 ("RET" . vertico-directory-enter)
                 ("DEL" . vertico-directory-delete-char)
                 ("M-DEL" . vertico-directory-delete-word)
                 :map minibuffer-local-map
                 ("M-h" . dw/minibuffer-backward-kill))
          :custom
          (vertico-cycle t)
          :custom-face
          (vertico-current ((t (:background "#2257a0"))))
          :init
          (vertico-mode)
           :hook (rfn-eshadow-update-overlay . vertico-directory-tidy))
(use-package orderless
  :init
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))


        (use-package corfu
          :straight '(corfu :host github
                            :repo "minad/corfu")
          :bind (:map corfu-map
                 ("C-j" . corfu-next)
                 ("C-k" . corfu-previous)
                 ("C-f" . corfu-insert))
          :custom
          (corfu-cycle t)
          :config
          (corfu-global-mode))


        (use-package corfu
          :straight '(corfu :host github
                            :repo "minad/corfu")
          :bind (:map corfu-map
                 ("C-j" . corfu-next)
                 ("C-k" . corfu-previous)
                 ("C-f" . corfu-insert))
          :custom
          (corfu-cycle t)
          :config
          (corfu-global-mode))


        (defun dw/get-project-root ()
          (when (fboundp 'projectile-project-root)
            (projectile-project-root)))

        (use-package consult
          :demand t
          :bind (("C-s" . consult-line)
                 ("C-M-l" . consult-imenu)
                 ("C-M-j" . persp-switch-to-buffer*)
                 :map minibuffer-local-map
                 ("C-r" . consult-history))
          :custom
          (consult-project-root-function #'dw/get-project-root)
          (completion-in-region-function #'consult-completion-in-region))


        (use-package marginalia
          :after vertico
          :custom
          (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
          :init
          (marginalia-mode))


        (use-package embark
          :bind (("C-S-a" . embark-act)
                 :map minibuffer-local-map
                 ("C-d" . embark-act))
          :config

          ;; Show Embark actions via which-key
          (setq embark-action-indicator
                (lambda (map)
                  (which-key--show-keymap "Embark" map nil nil 'no-paging)
                  #'which-key--hide-popup-ignore-command)
                embark-become-indicator embark-action-indicator))

         (use-package embark-consult
           :straight '(embark-consult :host github
                                      :repo "oantolin/embark"
                                      :files ("embark-consult.el"))
           :after (embark consult)
           :demand t
           :hook
          (embark-collect-mode . embark-consult-preview-minor-mode))


        #+end_src

** Config Reload
  I know this is a horrible shortcut for emacs
  #+begin_src emacs-lisp
(global-set-key (kbd "s-r") 'reload-config)
(defun reload-config ()
  (interactive)
  (load-file (concat user-emacs-directory "init.el")))
  (global-set-key (kbd "<f5>") 'revert-buffer)
  #+end_src
** Open Config
  F1 is to open help in many apps
  Your Config is helpful
  #+begin_src emacs-lisp
(global-set-key (kbd "<f1>") (lambda() (interactive)(find-file "~/Config.org")))
  #+end_src

** GOTO-ADDR
Very useful
  #+begin_src emacs-lisp
    (use-package goto-addr :straight t
      :hook ((org-mode compilation-mode prog-mode eshell-mode shell-mode) . goto-address-mode)
      :bind (:map goto-address-highlight-keymap
	     ("<RET>" . goto-address-at-point)
	     ("M-<RET>" . newline)))
  #+end_src

** Expand Region
Very useful for selecting text
  #+begin_src emacs-lisp
(use-package expand-region
  :straight t
  :bind ("C-q" . er/expand-region)
:defer t)
  #+end_src

** ORG
*** Additions
   #+begin_src emacs-lisp
     (setq org-ellipsis "▾")
     (defun ak-org-hooks ()
       (require 'org-tempo)
       (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
       (add-to-list 'org-structure-template-alist '("py" . "src python"))
       (add-to-list 'org-structure-template-alist '("sh" . "src bash"))
       (my/org-mode/load-prettify-symbols)
       (setq org-hide-emphasis-markers t)
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((emacs-lisp . t)
          (python . t)))
       (org-indent-mode 1)
       )
             (defun up-n-fold ()
               (interactive)
                (progn
                  (outline-previous-visible-heading 1)
                  (org-cycle)))
                  ;; (add-hook 'org-mode-hook 'ak-org-hooks)
                  (use-package org
                    :straight nil
                    :bind (:map org-mode-map
        ("<C-tab>" . up-n-fold)
                           )
                    :hook (org-mode . ak-org-hooks))
     #+end_src
*** UI
   #+begin_src emacs-lisp
(use-package org-bullets
:straight t
  :after org
  :hook (org-mode . org-bullets-mode))
   #+end_src

*** ORG TOC
This will auto generate TOC and will update TOC on save.
#+begin_src emacs-lisp
  (use-package toc-org :defer t
:hook (org-mode . toc-org-mode)
    )
#+end_src
*** ORG Auto-Tangle
It will auto tangle on save if #,autotangle is true in the file
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))
#+end_src
*** Org Bootstrap HTML
Export to twitter bootstrap
#+begin_src emacs-lisp
(use-package ox-twbs :defer t
  :straight t)
#+end_src
*** Pretty Symbols
#+begin_src emacs-lisp
(defun my/org-mode/load-prettify-symbols () "Prettify org mode keywords"
  (interactive)
  (setq prettify-symbols-alist
    (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
          '(
 ;;            ("#+begin_src" . ?🔜)
 ;; ("#+end_src" . ?🔝)
            ("#+begin_quote" . ?💭)
            ("#+end_quote" . ?🗯)
            ;("#+begin_example" . ?)
            ;("#+end_example" . ?)
            ("#+OPTIONS:" . ?⚙)
            ("#+startup:" . ?🏁)
            ("#+DATE:" . ?📅)
            ("#+AUTHOR:" . ?✍)
            ("#+TITLE:" . ?📖)
            ("#+language:" . ?🔤)
            ("[ ]" .  ?☐)
            ("[X]" . ?☑)
            ("[-]" . ?❍)
            ;("lambda" . ?λ)
            ;("#+header:" . ?)
            ;("#+name:" . ?﮸)
            ("#+results:" . ?🏁)
            ;("#+call:" . ?)
            (":properties:" . ?)
            ;(":logbook:" . ?)
            )))
  (prettify-symbols-mode 1))
#+end_src

** Which Key
Key previews
  #+begin_src emacs-lisp
(use-package which-key
  :init
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-side-window-max-height 0.25
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " → " ))
(which-key-mode)
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)

  #+end_src

** Modeline
I can't switch from +doom-modeline+ Just did lol
  #+begin_src emacs-lisp
    (use-package doom-modeline
      :straight t
      :config
      (doom-modeline-mode))
  #+end_src

** Theme
  #+begin_src emacs-lisp
    (use-package doom-themes :straight t :init (load-theme 'doom-one))
        ;; (use-package atom-one-dark-theme :straight t :init (load-theme 'atom-one-dark))
        ;; (use-package zerodark-theme :straight t :init (load-theme 'zerodark))
  #+end_src

** Magit
After using magit for a while, I can't use git cli for anythin other than adding and commiting everything.The diff feature is the killer feature imo.
  #+begin_src emacs-lisp
    (use-package magit
      :straight t
      :defer t
      :init
      (progn
        (bind-key "C-x g" 'magit-status)
        ))

    (setq magit-status-margin
          '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
    (use-package git-gutter
      :straight t
      :init
      (global-git-gutter-mode +1))

    (use-package git-timemachine
      :straight t
      )
    (use-package diff-hl
      :config
      (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
      (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))

  #+end_src

** Goggles
Animations for killing, pasting etc. etc.
#+begin_src emacs-lisp
  (use-package goggles
  :config
  (setq-default goggles-pulse t)
  (goggles-mode))
  #+end_src

** Vterm
My terminal of choice
  #+begin_src emacs-lisp
            (use-package vterm :straight t :defer t)
              (setq vterm-eval-cmds '(("magit-status-setup-buffer" magit-status-setup-buffer)
                                  ("find-file" find-file)
                                  ("message" message)
                                  ("vterm-clear-scrollback" vterm-clear-scrollback)))
        (use-package multi-vterm :straight t :defer t
            :bind ("s-<return>" . multi-vterm))
#+end_src

** Use local Emacs Instance as $EDITOR
the $EDITOR Var will be set such that it will open in the same instance of emacs
#+begin_src emacs-lisp
  (use-package with-editor :defer t)

(add-hook 'vterm-exec-hook  'with-editor-export-editor)

  #+end_src

** ESUP
Startup profiler. Very useful to check which packages are slowing my startup
  #+begin_src emacs-lisp
(use-package esup :defer t)
  #+end_src

** Scratch
Create new scratch buffers
For keybinds pls refer to my general.el section
  #+begin_src emacs-lisp
    (defun xah-new-empty-buffer ()
      "Create a new empty buffer.
    New buffer will be named “untitled” or “untitled<2>”, “untitled<3>”, etc.

    It returns the buffer (for elisp programing).

    URL `http://ergoemacs.org/emacs/emacs_new_empty_buffer.html'
    Version 2017-11-01"
      (interactive)
      (let (($buf (generate-new-buffer "untitled")))
        (switch-to-buffer $buf)
        (funcall initial-major-mode)
        (setq buffer-offer-save t)
        $buf
        ))
(defun python-scratch () (interactive) (xah-new-empty-buffer)(python-mode)(company-mode))
(defun emacs-lisp-scratch () (interactive) (xah-new-empty-buffer)(emacs-lisp-mode)(company-mode))
(defun sh-scratch () (interactive) (xah-new-empty-buffer)(sh-mode)(company-mode))
(defun c-scratch () (interactive) (xah-new-empty-buffer)(c-mode)(company-mode))
(defun sh-scratch () (interactive) (xah-new-empty-buffer)(sh-mode)(company-mode))
(defun org-scratch () (interactive) (xah-new-empty-buffer)(org-mode))
  #+end_src

** Hungry Delete
Delete extra whitespace with just one backspace
  #+begin_src emacs-lisp
(use-package hungry-delete
  :straight t
  :config (global-hungry-delete-mode))

  #+end_src

** ORG Roam
Note taking
  #+begin_src emacs-lisp
                     (use-package org-roam ;; Package is on melpa
                       :straight t
                   :defer t
                       :custom
                     (make-directory "~/org-roam") ;; The dir all notes are gonna be stored
                     (setq org-roam-directory (file-truename "~/org-roam"))
                     :bind (("C-c n l" . org-roam-buffer-toggle) ;; Binds
                            ("C-c n f" . org-roam-node-find)
                            ("C-c n g" . org-roam-graph) ;; Graph i was talking about.
                            ("C-c n i" . org-roam-node-insert)
                            ("C-c n c" . org-roam-capture)
                            ;; Dailies
                            ("C-c n j" . org-roam-dailies-capture-today))
                     :config
                     ;; If using org-roam-protocol
                     (require 'org-roam-protocol)
                     (add-to-list 'display-buffer-alist
                              '("\\*org-roam\\*"
                                (display-buffer-in-direction)
                                (direction . right)
                                (window-width . 0.33)
                                (window-height . fit-window-to-buffer)))
                 (setq org-roam-completion-everywhere t)
                 (org-roam-setup))
        (setq org-roam-v2-ack t)
  #+end_src

** Blog
Publish to my blog
  #+begin_src emacs-lisp
    (setq org-capture-templates
            '(("p" "Post" plain
                    (file create-blog-post)
                    (file "~/website/org-templates/post.orgcaptmpl"))))
        (defun create-blog-post ()
          "Create an org file in ~/source/myblog/posts."
          (interactive)
          (let ((name (read-string "Filename: ")))
            (expand-file-name (format "%s.org" name) "~/website/posts")))
        (defun blog-publish ()
          (interactive)
          (cd "~/website")
          (async-shell-command "make publish")
          (magit-status))
        (defun blog-post ()
          (interactive)
          "Capture a TODO item"
          (org-capture nil "p"))



  #+end_src
** Transparency is key
#+begin_src emacs-lisp
 ;;(set-frame-parameter (selected-frame) 'alpha '(<active> . <inactive>))
 ;;(set-frame-parameter (selected-frame) 'alpha <both>)
 ;; (set-frame-parameter (selected-frame) 'alpha '(98 . 50))
 ;; (add-to-list 'default-frame-alist '(alpha . (98 . 50)))
#+end_src

** Newline
As an ex-evil user this is very useful
This allows me to create a newline like vi commands o and O
  #+begin_src emacs-lisp
;; Behave like vi's o command
(defun open-next-line (arg)
  "Move to the next line and then opens a line.
 See also `newline-and-indent'."
  (interactive "p")
  (end-of-line)
  (open-line arg)
  (forward-line 1)
  (when newline-and-indent
    (indent-according-to-mode)))
(global-set-key (kbd "C-o") 'open-next-line)
;; Behave like vi's O command
(defun open-previous-line (arg)
  "Open a new line before the current one.
 See also `newline-and-indent'."
  (interactive "p")
  (beginning-of-line)
  (open-line arg)
  (when newline-and-indent
    (indent-according-to-mode)))
    (global-set-key (kbd "M-o") 'open-previous-line)
(global-set-key (kbd "C-S-o") 'open-previous-line)
;; Autoindent open-*-lines
(defvar newline-and-indent t
  "Modify the behavior of the open-*-line functions to cause them to autoindent.")
    (global-set-key [S-return]   'open-next-line)
(global-set-key [C-S-return] 'open-previous-line)

  #+end_src

** General
My keybings list
  #+begin_src emacs-lisp
(use-package general :straight t)
(global-unset-key (kbd "C-z"))
(general-define-key
 :prefix "C-z"
 "eb" 'eval-buffer
 "ed" 'eval-defun
 "ee" 'eval-expression
 "el" 'eval-last-sexp
 "er" 'eval-region
 "ld" 'xref-find-definitions
 "lr" 'xref-find-references
 "ln" 'lsp-ui-find-next-reference
 "lp" 'lsp-ui-find-prev-reference
 "ls" 'counsel-imenu
 "le" 'lsp-ui-flycheck-list
 "lS" 'lsp-ui-sideline-mode
 "lX" 'lsp-execute-code-action
 "sp" 'python-scratch
 "sl" 'emacs-lisp-scratch
 "sc" 'c-scratch
 "so" 'org-scratch
 "ss" 'sh-scratch
 "ds" 'sudo-edit
 "dd" 'counsel-find-file
 "."     '(find-file :which-key "Find file")
 "d r"   '(counsel-recentf :which-key "Recent files")
 "d s"   '(save-buffer :which-key "Save file")
 "d c"   '(copy-file :which-key "Copy file")
 "d D"   '(delete-file :which-key "Delete file")
 "d r"   '(rename-file :which-key "Rename file")
 "f S"   '(write-file :which-key "Save file as...")
 "b n" 'blog-post
 "b p" 'blog-publish
 "SPC" 'counsel-M-x)
(use-package sudo-edit :straight t :defer t) ;; Utilities for opening files with sudo

  #+end_src

** Undo FU
better Undo
  #+begin_src emacs-lisp
  (use-package undo-fu :straight t)
  (global-set-key (kbd "C-_")   'undo-fu-only-undo)
  (global-set-key (kbd "M-_") 'undo-fu-only-redo)
(use-package undo-fu-session
  :config
  (setq undo-fu-session-incompatible-files '("/COMMIT_EDITMSG\\'" "/git-rebase-todo\\'")))

(global-undo-fu-session-mode)

  #+end_src

** AutoSave
Auto Save my files when im away for more than a few seconds
  #+begin_src emacs-lisp
(use-package super-save
:straight t
  :diminish super-save-mode
  :config
  (super-save-mode +1)
  (setq super-save-auto-save-when-idle t))

  #+end_src

** Emojify
Display and insert emojis in emacs
  #+begin_src emacs-lisp
(use-package emojify
  :straight t
  :commands emojify-mode)

  #+end_src
** 0x0.st
0x0.st is a very nice url shortening service i use
#+begin_src emacs-lisp
(use-package 0x0 :straight t :defer t)
#+end_src
** Perspective
#+begin_src emacs-lisp
;; (use-package perspective
;;   :straight t  ; use `:straight t` if using straight.el!
;;   :bind (("C-x k" . persp-kill-buffer*))
;;   :init
;;   (persp-mode))
#+end_src
** Discover a mode's keybindings
#+begin_src emacs-lisp
(use-package discover-my-major :straight t :defer t :bind (("C-h C-m" . discover-my-major)))
#+end_src
** Dired
#+begin_src emacs-lisp
   (use-package dired
     :straight nil
  :bind (
     :map dired-mode-map
     ("h" . dired-single-buffer-up-directory)
     ("l" . dired-single-buffer)
     ("RET" . dired-single-buffer)
     ("S-RET" . dired-single-buffer)
     ("e" . dired-ediff-files)
     ))
   (setq dired-listing-switches "-agho --group-directories-first")
   (use-package dired-single)
     (setq wdired-allow-to-change-permissions t)
     (setq wdired-allow-to-redirect-links t)
     (setq wdired-use-interactive-rename nil)
  (use-package all-the-icons-dired
:straight t
)

(add-hook 'dired-mode-hook 'all-the-icons-dired-mode)


   #+end_src

** Mark Multiple
#+begin_src emacs-lisp
  (use-package mark-multiple
    :straight t
  :defer t
    :bind ("C-c q" . 'mark-next-like-this))
#+end_src

** Kill Word
#+begin_src emacs-lisp
(defun daedreth/kill-inner-word ()
  "Kills the entire word your cursor is in. Equivalent to 'ciw' in vim."
  (interactive)
  (forward-char 1)
  (backward-word)
  (kill-word 1))
(global-set-key (kbd "C-c w k") 'daedreth/kill-inner-word)
#+end_src

** Copy Word
#+begin_src emacs-lisp
(defun daedreth/copy-whole-word ()
  (interactive)
  (save-excursion
    (forward-char 1)
    (backward-word)
    (kill-word 1)
    (yank)))
(global-set-key (kbd "C-c w c") 'daedreth/copy-whole-word)
#+end_src

** Copy Line
#+begin_src emacs-lisp
(defun daedreth/copy-whole-line ()
  "Copies a line without regard for cursor position."
  (interactive)
  (save-excursion
    (kill-new
     (buffer-substring
      (point-at-bol)
      (point-at-eol)))))
(global-set-key (kbd "C-c l c") 'daedreth/copy-whole-line)
#+end_src

** Kill Line
#+begin_src emacs-lisp
(global-set-key (kbd "C-c l k") 'kill-whole-line)
#+end_src

** Get ENV from shell
#+begin_src emacs-lisp
  (use-package exec-path-from-shell :straight t
    :config
    (exec-path-from-shell-initialize))
#+end_src

** Unicode
#+begin_src emacs-lisp
    (use-package unicode-fonts :straight t
      :config
      (unicode-fonts-setup))
#+end_src

#+RESULTS:
: t

** Dashboard
#+begin_src emacs-lisp
  (use-package page-break-lines)
    (use-package dashboard :after page-break-lines
    :straight t
    :init                                                                      ;; tweak dashboard config before loading it
    (setq dashboard-set-heading-icons t)                                       ;; add icons for headings
    (setq dashboard-set-file-icons t)                                          ;; add icons for files
    (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")     ;; set a title to be displayed under the banner
    (setq dashboard-center-content nil)                                          ;; set to 't' for centered content
    (setq dashboard-items '((recents . 5)                                      ;; show some items on dashboard
                            (bookmarks . 5)
                            (registers . 5)))
    (setq dashboard-page-separator "\n\f\n")    ;; <-----
    (global-page-break-lines-mode)
    :config
    (dashboard-setup-startup-hook)
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :custom-face
      (dashboard-items-face ((t (:inherit widget-button :weight normal))))
      (dashboard-heading ((t (:inherit font-lock-keyword-face :weight semi-bold)))))

#+end_src

** Ace window
#+begin_src emacs-lisp
  (use-package ace-window
    :straight t
    :init
    (progn
      (setq aw-scope 'global) ;; was frame
      (global-set-key (kbd "C-x O") 'other-frame)
      ;; (global-set-key [remap other-window] 'ace-window)
      (ace-window-display-mode)
      ))
#+end_src

** IBuffer
#+begin_src emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
   (setq ibuffer-saved-filter-groups
         (quote (("default"
                  ("dired" (mode . dired-mode))
                  ("org" (name . "^.*org$"))
                  ("magit" (mode . magit-mode))
                  ("IRC" (or (mode . circe-channel-mode) (mode . circe-server-mode)))
                  ("web" (or (mode . web-mode) (mode . js2-mode)))
                  ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
                  ;; ("mu4e" (or

                  ;;          (mode . mu4e-compose-mode)
                  ;;          (name . "\*mu4e\*")
                  ;;          ))
                  ("programming" (or
                                  (mode . clojure-mode)
                                  (mode . clojurescript-mode)
                                  (mode . python-mode)
                                  (mode . c++-mode)))
                  ("emacs" (or
                            (name . "^\\*scratch\\*$")
                            (name . "^\\*Messages\\*$")))
                  ("eaf" (mode . eaf-mode))
                  ))))
   (add-hook 'ibuffer-mode-hook
             (lambda ()
               (ibuffer-auto-mode 1)
               (ibuffer-switch-to-saved-filter-groups "default")))

   ;; don't show these
                                           ;(add-to-list 'ibuffer-never-show-predicates "zowie")
   ;; Don't show filter groups if there are no buffers in that group
   (setq ibuffer-show-empty-filter-groups nil)
#+end_src

** Rename Files like a chad
#+begin_src emacs-lisp
(defun hrs/rename-file (new-name)
  (interactive "FNew name: ")
  (let ((filename (buffer-file-name)))
    (if filename
        (progn
          (when (buffer-modified-p)
            (save-buffer))
          (rename-file filename new-name t)
          (kill-buffer (current-buffer))
          (find-file new-name)
          (message "Renamed '%s' -> '%s'" filename new-name))
      (message "Buffer '%s' isn't backed by a file!" (buffer-name)))))
#+end_src

** Better Help Menu
#+begin_src emacs-lisp
(use-package helpful :defer t)
(global-set-key (kbd "C-h f") #'helpful-callable)
(global-set-key (kbd "C-h v") #'helpful-variable)
(global-set-key (kbd "C-h k") #'helpful-key)
#+end_src

** Resize
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>") 'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>") 'shrink-window)
  (global-set-key (kbd "S-C-<up>") 'enlarge-window)
  (windmove-swap-states-default-keybindings)
  (winner-mode t)
#+end_src

** EAF
#+begin_src emacs-lisp
 (add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
  (require 'eaf)
  (load "~/.emacs.d/site-lisp/emacs-application-framework/app/browser/eaf-browser.el")
  (load "~/.emacs.d/site-lisp/emacs-application-framework/app/camera/eaf-camera.el")
 (load "~/.emacs.d/site-lisp/emacs-application-framework/app/video-player/eaf-video-player.el")
 (load "~/.emacs.d/site-lisp/emacs-application-framework/app/pdf-viewer/eaf-pdf-viewer.el")
  (load "~/.emacs.d/site-lisp/emacs-application-framework/app/org-previewer/eaf-org-previewer.el")
 (setq eaf-pdf-dark-mode t)
 (setq eaf-browser-enable-scrollbar t)
  (setq eaf-browser-pc-user-agent "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:83.0) Gecko/20100101 Firefox/83.0")
  (setq eaf-browser-dark-mode nil)
  (setq eaf-pdf-dark-exclude-image t)
  (defun browser ()
    (interactive)
    (eaf-open-browser-with-history))
  (use-package epc :defer t)
  (use-package ctable :defer t)
  (use-package s :defer t)
  (use-package deferred :defer t)
#+end_src
** Ement
#+begin_src emacs-lisp
;; ;; Install `plz' HTTP library (not on MELPA yet).
;; (use-package plz
;;   :straight '(plz :host github :repo "alphapapa/plz.el"))

;; ;; Install Ement.
;; (use-package ement
;;   :straight '(ement :host github :repo "alphapapa/ement.el"))

  (setf use-default-font-for-symbols nil)
  (set-fontset-font t 'unicode "Joypixels" nil 'append)
#+end_src

** IJKL
#+begin_src emacs-lisp
  ;; make cursor movement keys under right hand's home-row.
  (global-set-key (kbd "M-i") 'previous-line)
  (global-set-key (kbd "M-j") 'backward-char)
  (global-set-key (kbd "M-k") 'next-line)
  (global-set-key (kbd "M-l") 'forward-char)

  (global-set-key (kbd "M-u") 'backward-word)
  (global-set-key (kbd "M-o") 'forward-word)

  ;; (defun dw/dont-arrow-me-bro ()
  ;;   (interactive)
  ;;   (message "Arrow keys are bad, you know?"))
  ;; (global-unset-key (kbd "<left>"))
  ;; (global-unset-key (kbd "<right>"))
  ;; (global-unset-key (kbd "<up>"))
  ;; (global-unset-key (kbd "<down>"))
  ;; (global-set-key (kbd "<left>") 'dw/dont-arrow-me-bro)
  ;; (global-set-key (kbd "<right>") 'dw/dont-arrow-me-bro)
  ;; (global-set-key (kbd "<up>") 'dw/dont-arrow-me-bro)
  ;; (global-set-key (kbd "<down>") 'dw/dont-arrow-me-bro)
#+end_src
** Haskell
  #+begin_src emacs-lisp
        (use-package haskell-mode
    :mode (("\\.hs\\'" . haskell-mode))
          )
 #+end_src
** LSP Mode
  #+begin_src emacs-lisp
          (defun efs/lsp-mode-setup ()
        (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
        (lsp-headerline-breadcrumb-mode))

          (use-package lsp-mode
          :straight t
          :defer t
        :after (company company-box)
        :commands (lsp lsp-deferred)
        :hook (lsp-mode . efs/lsp-mode-setup)
        (lsp-mode . company-mode)
        :init
        (setq lsp-keymap-prefix "C-c l")  ;; Or 'C-l', 's-l'
  :custom
  (lsp-rust-analyzer-cargo-watch-command "clippy")
  (lsp-eldoc-render-all t)
  (lsp-idle-delay 0.6)
  (lsp-rust-analyzer-server-display-inlay-hints t)
        :config
        ((let* (args)
           )lsp-enable-which-key-integration t))
          (use-package lsp-ui :after lsp-mode
          :straight t
        :hook (lsp-mode . lsp-ui-mode)
        :custom
        (lsp-ui-doc-position 'bottom)
    )
                      #+end_src
** Company
#+begin_src emacs-lisp
  (use-package company
                :straight t
          :after (lsp-mode)
              :hook ((lsp-mode org-mode prog-mode) . company-mode)
              :bind (:map company-active-map
                     ("<tab>" . company-complete-selection))
              (:map lsp-mode-map
                    ("<tab>" . company-indent-or-complete-common))

              :custom
              (company-minimum-prefix-length 1)
              (company-idle-delay 0.0))

                (use-package company-box
                :straight t
              :hook (company-mode . company-box-mode))
          (use-package company-quickhelp :straight t :after company :hook (company-mode . company-quickhelp-mode) :defer t)
#+end_src
** Python
#+begin_src emacs-lisp
  (use-package python-mode
    :straight nil
    :mode ("\\.py\\'")
    :hook (python-mode . lsp-deferred))
          (use-package py-autopep8 :straight t :hook (python-mode . py-autopep8-enable-on-save))
    #+end_src
** Shell
#+begin_src emacs-lisp
    (use-package company-shell :straight t
          :hook ((sh-mode shell-mode) . sh-mode-init)
          :config
          (defun sh-mode-init ()
            (setq-local company-backends '((company-shell
                            company-shell-env
                            company-files
                            company-dabbrev-code
                            company-capf
                            company-yasnippet)))))
    (use-package sh-mode :straight nil
      :hook (sh-mode . lsp-deferred))
  #+end_src

** Web
  npm install -g vscode-html-languageserver-bin vscode-css-languageserver-bin typescript typescript-language-server
  #+begin_src emacs-lisp
    (use-package web-mode
      :mode "(\\.\\(html?\\|ejs\\|tsx\\|jsx\\)\\'"
      :hook (web-mode . lsp-deferred)
      :config
      (setq-default web-mode-code-indent-offset 2)
      (setq-default web-mode-markup-indent-offset 2)
      (setq-default web-mode-attribute-indent-offset 2))

    (use-package impatient-mode :hook (web-mode . impatient-mode))
  #+end_src

** Rust
  #+begin_src emacs-lisp

(defun hrs/append-to-path (path)
  "Add a path both to the $PATH variable and to Emacs' exec-path."
  (setenv "PATH" (concat (getenv "PATH") ":" path))
  (add-to-list 'exec-path path))
    (use-package rustic
          :bind (:map rustic-mode-map
                      ("M-j" . lsp-ui-imenu)
                      ("M-?" . lsp-find-references)
                      ("C-c C-c l" . flycheck-list-errors)
                      ("C-c C-c a" . lsp-execute-code-action)
                      ("C-c C-c r" . lsp-rename)
                      ("C-c C-c q" . lsp-workspace-restart)
                      ("C-c C-c Q" . lsp-workspace-shutdown)
                      ("C-c C-c s" . lsp-rust-analyzer-status))

  :config
  (hrs/append-to-path "~/.cargo/bin")
  (setq rustic-format-on-save t)
  (add-hook 'rustic-mode-hook 'hrs/rustic-mode-hook))
    (defun hrs/rustic-mode-hook ()
      "Don't prompt for confirmation before running `rustfmt'."
      (setq-local buffer-save-without-query t))

  #+end_src

** C/C++
  #+begin_src emacs-lisp
      (add-hook 'c-mode-hook 'lsp-deferred)
      (add-hook 'c++-mode-hook 'lsp-deferred)
        (defun auto-recompile-buffer ()
      (interactive)
      (if (member #'recompile after-save-hook)
          (remove-hook 'after-save-hook #'recompile t)
        (add-hook 'after-save-hook #'recompile nil t)))


  #+end_src

** FlyCheck
  #+begin_src emacs-lisp
  (use-package flycheck :straight t :hook (prog-mode . flycheck-mode) :defer t)
  #+end_src
** MarkDown
  #+begin_src emacs-lisp
(use-package markdown-mode
  :straight t
  :mode "\\.md\\'"
  :config
  (setq markdown-command "marked")
  (defun dw/set-markdown-header-font-sizes ()
    (dolist (face '((markdown-header-face-1 . 1.2)
                    (markdown-header-face-2 . 1.1)
                    (markdown-header-face-3 . 1.0)
                    (markdown-header-face-4 . 1.0)
                    (markdown-header-face-5 . 1.0)))
      (set-face-attribute (car face) nil :weight 'normal :height (cdr face))))

  (defun dw/markdown-mode-hook ()
    (dw/set-markdown-header-font-sizes))

  (add-hook 'markdown-mode-hook 'dw/markdown-mode-hook))

  #+end_src

** Highlight Indent
Very useful for python
It shows the indentation with | symbol like in PyCharm
#+begin_src emacs-lisp
;; highlight indentations in python
(use-package highlight-indent-guides
  :hook ((python-mode sass-mode yaml-mode nim-mode) . highlight-indent-guides-mode)
  :config
  ;; Don't highlight first level (that would be a line at column 1)
  (defun my-highlighter (level responsive display)
    (if (> 1 level) ; replace `1' with the number of guides you want to hide
        nil
      (highlight-indent-guides--highlighter-default level responsive display)))

  (setq highlight-indent-guides-highlighter-function 'my-highlighter)
  (setq highlight-indent-guides-method 'character)
  (setq highlight-indent-guides-character ?\|)
  (setq highlight-indent-guides-auto-odd-face-perc 15)
  (setq highlight-indent-guides-auto-even-face-perc 15)
  (setq highlight-indent-guides-auto-character-face-perc 20)

  (highlight-indent-guides-auto-set-faces))
  #+end_src
** Aggressive-indent
It auto-indents everything
I love indentation
  #+begin_src emacs-lisp
(use-package aggressive-indent
  :hook ((emacs-lisp-mode lisp-mode hy-mode clojure-mode css js-mode) . aggressive-indent-mode)
  :config
  ;; Normally this functions from `indent.el' always displays an
  ;; annoying "reporter" message that it's indenting the current region.
  ;; This patch disables that message
  (defun indent-region-line-by-line (start end)
    (save-excursion
      (setq end (copy-marker end))
      (goto-char start)
      (while (< (point) end)
        (or (and (bolp) (eolp))
            (indent-according-to-mode))
        (forward-line 1))
      (move-marker end nil))))

  #+end_src
** Smart Parenthesis

smartparens smartly adds parens.
Used to use electric-pairs but it was bad especially with ' in elisp

#+begin_src emacs-lisp
  (use-package smartparens
    :defer 1
    :hook ((
            emacs-lisp-mode lisp-mode lisp-data-mode clojure-mode cider-repl-mode hy-mode
            prolog-mode go-mode cc-mode python-mode
            typescript-mode json-mode javascript-mode java-mode
            ) . smartparens-strict-mode)
    ;; :hook (prog-mode . smartparens-strict-mode)
    :bind (:map smartparens-mode-map
                ;; This is the paredit mode map minus a few key bindings
                ;; that I use in other modes (e.g. M-?)
                ("C-M-f" . sp-forward-sexp) ;; navigation
                ("C-M-b" . sp-backward-sexp)
                ("C-M-u" . sp-backward-up-sexp)
                ("C-M-d" . sp-down-sexp)
                ("C-M-p" . sp-backward-down-sexp)
                ("C-M-n" . sp-up-sexp)
                ("C-w" . whole-line-or-region-sp-kill-region)
                ("M-s" . sp-splice-sexp) ;; depth-changing commands
                ("M-r" . sp-splice-sexp-killing-around)
                ("M-(" . sp-wrap-round)
                ("C-)" . sp-forward-slurp-sexp) ;; barf/slurp
                ("C-<right>" . sp-forward-slurp-sexp)
                ("C-}" . sp-forward-barf-sexp)
                ("C-<left>" . sp-forward-barf-sexp)
                ("C-(" . sp-backward-slurp-sexp)
                ("C-M-<left>" . sp-backward-slurp-sexp)
                ("C-{" . sp-backward-barf-sexp)
                ("C-M-<right>" . sp-backward-barf-sexp)
                ("M-S" . sp-split-sexp) ;; misc
                ("C-M-s" . sp-join-sexp))
    :config
    (require 'smartparens-config)
    (setq sp-base-key-bindings 'paredit)
    (setq sp-autoskip-closing-pair 'always)
    ;; Always highlight matching parens
    (show-smartparens-global-mode +1)
    (setq blink-matching-paren nil)  ;; Don't blink matching parens
    (defun whole-line-or-region-sp-kill-region (prefix)
      "Call `sp-kill-region' on region or PREFIX whole lines."
      (interactive "*p")
      (whole-line-or-region-wrap-beg-end 'sp-kill-region prefix))
    ;; Create keybindings to wrap symbol/region in pairs
    (defun prelude-wrap-with (s)
      "Create a wrapper function for smartparens using S."
      `(lambda (&optional arg)
         (interactive "P")
         (sp-wrap-with-pair ,s)))
    (define-key prog-mode-map (kbd "M-(") (prelude-wrap-with "("))
    (define-key prog-mode-map (kbd "M-[") (prelude-wrap-with "["))
    (define-key prog-mode-map (kbd "M-{") (prelude-wrap-with "{"))
    (define-key prog-mode-map (kbd "M-\"") (prelude-wrap-with "\""))
    (define-key prog-mode-map (kbd "M-'") (prelude-wrap-with "'"))
    (define-key prog-mode-map (kbd "M-`") (prelude-wrap-with "`"))
    ;; smart curly braces
    (sp-pair "{" nil :post-handlers
             '(((lambda (&rest _ignored)
                  (crux-smart-open-line-above)) "RET")))
    (sp-pair "[" nil :post-handlers
             '(((lambda (&rest _ignored)
                  (crux-smart-open-line-above)) "RET")))
    (sp-pair "(" nil :post-handlers
             '(((lambda (&rest _ignored)
                  (crux-smart-open-line-above)) "RET")))
    ;; Don't include semicolon ; when slurping
    (add-to-list 'sp-sexp-suffix '(java-mode regexp ""))
    ;; use smartparens-mode everywhere
    (smartparens-global-mode))

  #+end_src
** Rainbow Parens
Rainbow parentheiss
  #+begin_src emacs-lisp
(use-package rainbow-delimiters
:straight t
  :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src
** Nerd Commenter
comment and unhcomment with ease
  #+begin_src emacs-lisp
(use-package evil-nerd-commenter
  :straight t
  :bind ("M-/" . evilnc-comment-or-uncomment-lines))
  #+end_src

** Colour Picker
#+begin_src emacs-lisp
  (use-package rainbow-mode
  :defer t
  :straight t

    :init
      (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

** The Standard Unix Password Manager
#+begin_src emacs-lisp
(straight-use-package
  '(password-store-otp :type git :host github :repo "volrath/password-store-otp.el"))
#+end_src
* BashRC
:PROPERTIES:
:header-args:bash: :tangle "~/.bashrc"
:END:
** Exports
Just some basics
#+begin_src bash
### EXPORT
export TERM="xterm-256color"                      # getting proper colors
export HISTCONTROL=ignoredups:erasedups           # no duplicate entries
export EDITOR="emacsclient -t -a ''"              # $EDITOR use Emacs in terminal
export VISUAL="emacsclient -c -a emacs"           # $VISUAL use Emacs in GUI mode
### "bat" as manpager
export MANPAGER="sh -c 'col -bx | bat -l man -p'"
#+end_src
** PATH
Add .local/bin and .cargo/bin to the PATH
#+begin_src bash
  case ":${PATH}:" in
      ,*:"$HOME/.cargo/bin":*)
      ;;
      ,*)
          # Prepending path in case a system-installed rustc needs to be overridden
          export PATH="$HOME/.cargo/bin:$PATH"
          ;;
  esac

  ### PATH
  if [ -d "$HOME/.bin" ] ;
  then PATH="$HOME/.bin:$PATH"
  fi

  if [ -d "$HOME/.local/bin" ] ;
  then PATH="$HOME/.local/bin:$PATH"
  fi

#+end_src

** Only interactive
Everything from here should only be run if its interactive.
#+begin_src bash
[[ $- != *i* ]] && return
#+end_src

** Extra features
Small extra features enabled with shopt
#+begin_src bash
 ### SHOPT
 shopt -s autocd # change to named directory
 shopt -s cdspell # autocorrects cd misspellings
 shopt -s cmdhist # save multi-line commands in history as single line
 shopt -s dotglob
 shopt -s histappend # do not overwrite history
 shopt -s expand_aliases # expand aliases
 shopt -s checkwinsize # checks term size when bash regains control
 shopt -s extglob
 #ignore upper and lowercase when TAB completion
 bind "set completion-ignore-case on"
#+end_src

** Archive extraction
Extract
#+begin_src bash
 x ()
 {
     if [ -f $1 ] ; then
         case $1 in
             *.tar.bz2)   tar xjf $1   ;;
             *.tar.gz)    tar xzf $1   ;;
             *.bz2)       bunzip2 $1   ;;
             *.rar)       unrar x $1   ;;
             *.gz)        gunzip $1    ;;
             *.tar)       tar xf $1    ;;
             *.tbz2)      tar xjf $1   ;;
             *.tgz)       tar xzf $1   ;;
             *.zip)       unzip $1     ;;
             *.Z)         uncompress $1;;
             *.7z)        7z x $1      ;;
             *.deb)       ar x $1      ;;
             *.tar.xz)    tar xf $1    ;;
             *.tar.zst)   unzstd $1    ;;
             *)           echo "'$1' cannot be extracted via ex()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
 }
#+end_src

** Eliases
Maybe that was a bad joke
#+begin_src bash
 alias em="/usr/bin/emacs -nw"
 alias emacs="emacsclient -c -a 'emacs'"
#+end_src

** LS
#+begin_src bash
 alias ls='exa -hal --color=always --group-directories-first --icons' # my preferred listing
 alias la='ls'
 alias l.='ls | egrep "^\."'
#+end_src

** Grep color
#+begin_src bash
 # Colorize grep output (good for log files)
 alias grep='grep --color=auto'
 alias egrep='egrep --color=auto'
 alias fgrep='fgrep --color=auto'
#+end_src

** Interactive dangerous commands
#+begin_src bash
 alias cp="cp -i"
 alias mv='mv -i'
 alias rm='rm -i'
#+end_src

** Human readability for some commands
#+begin_src bash
  alias df='df -h'                          # human-readable sizes
  alias free='free -m'                      # show sizes in MB
  #+end_src

** Xresources alias
#+begin_src bash
 alias merge='xrdb -merge ~/.config/X11/Xresources'
#+end_src

** Git
Good to have even tho i dont use them
#+begin_src bash
 # git
 alias addup='git add -u'
 alias addall='git add .'
 alias branch='git branch'
 alias checkout='git checkout'
 alias clone='git clone'
 alias commit='git commit -m'
 alias fetch='git fetch'
 alias pull='git pull origin'
 alias push='git push origin'
 alias stat='git status'  # 'status' is protected name so using 'stat' instead
 alias tag='git tag'
 alias newtag='git tag -a'
#+end_src

** YTDL
#+begin_src bash
 # youtube-dl
 alias yta-aac="youtube-dl --extract-audio --audio-format aac "
 alias yta-best="youtube-dl --extract-audio --audio-format best "
 alias yta-flac="youtube-dl --extract-audio --audio-format flac "
 alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
 alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
 alias yta-opus="youtube-dl --extract-audio --audio-format opus "
 alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
 alias yta-wav="youtube-dl --extract-audio --audio-format wav "
 alias ytv-best="youtube-dl -f bestvideo+bestaudio "
#+end_src

** Fun aliases
#+begin_src bash
 # termbin
 alias tb="nc termbin.com 9999"

 # the terminal rickroll
 alias rr='curl -s -L https://raw.githubusercontent.com/keroserene/rickrollrc/master/roll.sh | bash'
#+end_src

** Fun ascii art
#+begin_src bash
  colorscript random
#+end_src

** VTerm
#+begin_src bash
 # VTERM
 vterm_printf(){
     if [ -n "$TMUX" ] && ([ "${TERM%%-*}" = "tmux" ] || [ "${TERM%%-*}" = "screen" ] ); then
         # Tell tmux to pass the escape sequences through
         printf "\ePtmux;\e\e]%s\007\e\\" "$1"
     elif [ "${TERM%%-*}" = "screen" ]; then
         # GNU screen (screen, screen-256color, screen-256color-bce)
         printf "\eP\e]%s\007\e\\" "$1"
     else
         printf "\e]%s\e\\" "$1"
     fi
 }
 if [[ "$INSIDE_EMACS" = 'vterm' ]]; then
     function clear(){
         vterm_printf "51;Evterm-clear-scrollback";
         tput clear;
     }
 fi
 PROMPT_COMMAND='echo -ne "\033]0;${HOSTNAME}:${PWD}\007"'
 vterm_prompt_end(){
     vterm_printf "51;A$(whoami)@$(hostname):$(pwd)"
 }
 PS1=$PS1'\[$(vterm_prompt_end)\]'
 vterm_cmd() {
     local vterm_elisp
     vterm_elisp=""
     while [ $# -gt 0 ]; do
         vterm_elisp="$vterm_elisp""$(printf '"%s" ' "$(printf "%s" "$1" | sed -e 's|\\|\\\\|g' -e 's|"|\\"|g')")"
         shift
     done
     vterm_printf "51;E$vterm_elisp"
 }
 find_file() {
     vterm_cmd find-file "$(realpath "${@:-.}")"
 }

 say() {
     vterm_cmd message "%s" "$*"
 }
 open_file_below() {
     vterm_cmd find-file-below "$(realpath "${@:-.}")"
 }
 if [[ "$INSIDE_EMACS" = 'vterm' ]] \
        && [[ -n ${EMACS_VTERM_PATH} ]] \
        && [[ -f ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh ]]; then
	 source ${EMACS_VTERM_PATH}/etc/emacs-vterm-bash.sh

     alias vim="find_file"
 fi
#+end_src

** Starship
#+begin_src bash
eval "$(starship init bash)"
#+end_src

** BLE.SH
Nice com-pletions
#+begin_src bash
 source ~/.local/share/blesh/ble.sh
#+end_src
** Startx .config
#+begin_src bash
 alias startx="startx ~/.config/X11/xinitrc"
#+end_src

** Sudo commands automagically
#+begin_src bash
 for command in mount umount sv pacman updatedb su ; do
	 alias $command="sudo $command"
 done; unset command
#+end_src

** File stuff
#+begin_src bash
 ## a quick way to get out of current directory ##
 alias ..='cd ..'
 alias ...='cd ../../'
 alias ....='cd ../../../'
 alias .....='cd ../../../../'
 alias .4='cd ../../../../'
 alias .5='cd ../../../../..'
 alias mkdir='mkdir -pv'
 alias path='echo -e ${PATH//:/\\n}'

#+end_src

** Misc aliases
#+begin_src bash
 alias pubip="dig +short myip.opendns.com @resolver1.opendns.com"
 alias localip="sudo ifconfig | grep -Eo 'inet (addr:)?([0-9]*\\.){3}[0-9]*' | grep -Eo '([0-9]*\\.){3}[0-9]*' | grep -v '127.0.0.1'"
 alias ips="sudo ifconfig -a | grep -o 'inet6\\? \\(addr:\\)\\?\\s\\?\\(\\(\\([0-9]\\+\\.\\)\\{3\\}[0-9]\\+\\)\\|[a-fA-F0-9:]\\+\\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"
 alias pserver="python -m http.server --directory=$1"
 alias mnt="mount | awk -F' ' '{ printf \"%s\t%s\n\",\$1,\$3; }' | column -t | egrep ^/dev/ | sort"
 alias hist='history|grep'
 alias count='find . -type f | wc -l'
#+end_src

** GPG TTY
GPG breaks without this
#+begin_src bash
export GPG_TTY=$(tty)
#+end_src

* Bash Profile
:PROPERTIES:
:header-args:bash: :tangle "~/.bash_profile"
:END:
** Terminal and Browser
#+begin_src bash
# I use vterm, but for many things alacritty is better
export TERMINAL="alacritty"
export BROWSER="brave-browser"
#+end_src

** Clear Home
#+begin_src bash
export XDG_CONFIG_HOME="$HOME/.config"
export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CACHE_HOME="$HOME/.cache"
export XINITRC="${XDG_CONFIG_HOME:-$HOME/.config}/X11/xinitrc"
export GTK2_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-2.0/gtkrc-2.0"
export LESSHISTFILE="-"
export WGETRC="${XDG_CONFIG_HOME:-$HOME/.config}/wget/wgetrc"
export INPUTRC="${XDG_CONFIG_HOME:-$HOME/.config}/shell/inputrc"
export ALSA_CONFIG_PATH="$XDG_CONFIG_HOME/alsa/asoundrc"
export PASSWORD_STORE_DIR="${XDG_DATA_HOME:-$HOME/.local/share}/password-store"
export TMUX_TMPDIR="$XDG_RUNTIME_DIR"
export ANDROID_SDK_HOME="${XDG_CONFIG_HOME:-$HOME/.config}/android"
export CARGO_HOME="${XDG_DATA_HOME:-$HOME/.local/share}/cargo"
export GOPATH="${XDG_DATA_HOME:-$HOME/.local/share}/go"
export ANSIBLE_CONFIG="${XDG_CONFIG_HOME:-$HOME/.config}/ansible/ansible.cfg"
export HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/history"
export LESS=-R
export LESS_TERMCAP_mb="$(printf '%b' '[1;31m')"
export LESS_TERMCAP_md="$(printf '%b' '[1;36m')"
export LESS_TERMCAP_me="$(printf '%b' '[0m')"
export LESS_TERMCAP_so="$(printf '%b' '[01;44;33m')"
export LESS_TERMCAP_se="$(printf '%b' '[0m')"
export LESS_TERMCAP_us="$(printf '%b' '[1;32m')"
export LESS_TERMCAP_ue="$(printf '%b' '[0m')"
export LESSOPEN="| /usr/bin/highlight -O ansi %s 2>/dev/null"
#+end_src
** Wayland
I used to use sway
Nvidia...
#+begin_src bash
export QT_QPA_PLATFORMTHEME="gtk2"	# Have QT use gtk2 theme.
export MOZ_USE_XINPUT2="1"		# Mozilla smooth scrolling/touchpads.
export AWT_TOOLKIT="MToolkit wmname LG3D"	#May have to install wmname
export _JAVA_AWT_WM_NONREPARENTING=1	# Fix for Java applications in dwm
export MOZ_ENABLE_WAYLAND=1
export XDG_CURRENT_DESKTOP=sway
export XDG_SESSION_TYPE=wayland
export WLR_NO_HARDWARE_CURSORS=1
#+end_src

** Misc
#+begin_src bash
if [ -e /home/ak/.nix-profile/etc/profile.d/nix.sh ]; then . /home/ak/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer
[[ -f ~/.bashrc ]] && . ~/.bashrc
#+end_src

* GIT
:PROPERTIES:
:header-args:conf: :tangle "~/.gitconfig"
:END:
** My email and name
#+begin_src conf
  [user]
      email = aryakiran@zohomail.eu
      name = Arya Kiran
      # Need to update my gpg key
      signingkey = F17E941C3818817A
#+end_src
** Github Cred
Get my github credentials from gh cli
#+begin_src conf
  [credential "https://github.com"]
      helper =
      helper = !/usr/bin/gh auth git-credential
  [credential]
      helper = store

#+end_src

** Sign all commits with gpg
#+begin_src conf
# [commit]
#     gpgsign = true
[gpg]
	program = gpg2
#+end_src
